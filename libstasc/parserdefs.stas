fn Function.argc          1 1 {      }
fn Function.retc          1 1 { 4  + }
fn Function.name          1 1 { 8  + }
fn Function.start_inst    1 1 { 16 + }
fn Function.end_inst      1 1 { 20 + }
fn Function.a_sp          1 1 { 24 + }
fn Function.is_used       1 1 { 28 + }
fn Function.forbid_inline 1 1 { 29 + }
const sizeof(Function)        { 30   }

fn rFunction.name 1 1   { Function.name r64 }

const functions.cap { 512 }
auto  functions.len 1
const sizeof(functions) { sizeof(Function) functions.cap * }
reserve functions sizeof(functions)

const ScopeTyp.scope            { 1 }
const ScopeTyp.checked_scope    { 2 }
const ScopeTyp.if_block         { 3 }
const ScopeTyp.else_block       { 4 }
const ScopeTyp.else_block_scope { 5 }
const ScopeTyp.elif_block       { 6 }
const ScopeTyp.elif_block_scope { 7 }

fn Scope.typ       1 1 {      }
fn Scope.sp        1 1 { 4  + }
fn Scope.sp2       1 1 { 8  + }
fn Scope.idx       1 1 { 12 + }
fn Scope.label_id  1 1 { 16 + }
fn Scope.label_id2 1 1 { 20 + }
fn Scope.var_scope 1 1 { 24 + }
const sizeof(Scope)    { 30   }

const VarTyp.buffer { 1 }
const VarTyp.stack  { 2 }

fn Variable.typ  1 1   {      }
fn Variable.size 1 1   { 4  + }
fn Variable.a_sp 1 1   { 8  + }
fn Variable.idx  1 1   { 12 + }
fn Variable.name 1 1   { 16 + }
const sizeof(Variable) { 24   }

fn rVariable.name 1 1   { Variable.name r64 }

const global_var_context.cap { 512 } 
auto global_var_context.len 1
const sizeof(global_var_context) { sizeof(Variable) global_var_context.cap * }
reserve global_var_context sizeof(global_var_context)

fn Constant.name       1 1 {      }
fn Constant.inst_start 1 1 { 8  + }
fn Constant.tok        1 1 { 12 + }
fn Constant.value      1 1 { 16 + }
const sizeof(Constant)     { 24   }

fn rConstant.name 1 1 { Constant.name r64 }

const toplevel_constants.cap { 512 } 
auto toplevel_constants.len 1
const sizeof(toplevel_constants) { sizeof(Variable) toplevel_constants.cap * }
reserve toplevel_constants sizeof(toplevel_constants)

const              Inst.push_str { 1  }
const              Inst.push_num { 2  }
const       Inst.push_local_addr { 3  }
const   Inst.pop_local_stack_var { 4  }
const  Inst.push_local_stack_var { 5  }
const  Inst.push_global_var_name { 6  }
const  Inst.pop_global_stack_var { 7  }
const Inst.push_global_stack_var { 8  }
const             Inst.push_argc { 9  }
const             Inst.push_argv { 10 }
const           Inst.do_cond_jmp { 11 }
const                Inst.do_jmp { 12 }
const                 Inst.label { 13 }
const            Inst.fn_prelude { 14 }
const              Inst.fn_leave { 15 }
const               Inst.fn_call { 16 }
const               Inst._assert { 17 }
const       Inst.trap_breakpoint { 18 }
const                  Inst.plus { 19 }
const                   Inst.sub { 20 }
const                   Inst.mul { 21 }
const                   Inst.div { 22 }
const                   Inst.mod { 23 }
const                   Inst.inc { 24 }
const                   Inst.dec { 25 }
const                Inst.divmod { 26 }
const                   Inst.shr { 27 }
const                   Inst.shl { 28 }
const                 Inst.b_and { 29 }
const                  Inst.b_or { 30 }
const                 Inst.b_not { 31 }
const                 Inst.b_xor { 32 }
const                  Inst.swap { 33 }
const                   Inst.dup { 34 }
const                  Inst.over { 35 }
const                 Inst.over2 { 36 }
const                   Inst.rot { 37 }
const                  Inst.rot4 { 38 }
const                  Inst.drop { 39 }
const                   Inst.equ { 40 }
const                  Inst.nequ { 41 }
const                    Inst.gt { 42 }
const                    Inst.lt { 43 }
const                   Inst.gte { 44 }
const                   Inst.lte { 45 }
const                  Inst.s_gt { 46 }
const                  Inst.s_lt { 47 }
const                 Inst.s_gte { 48 }
const                 Inst.s_lte { 49 }
const                    Inst.w8 { 50 }
const                   Inst.w16 { 51 }
const                   Inst.w32 { 52 }
const                   Inst.w64 { 53 }
const                    Inst.r8 { 54 }
const                   Inst.r16 { 55 }
const                   Inst.r32 { 56 }
const                   Inst.r64 { 57 }
const              Inst.syscall0 { 58 }
const              Inst.syscall1 { 59 }
const              Inst.syscall2 { 60 }
const              Inst.syscall3 { 61 }
const              Inst.syscall4 { 62 }
const              Inst.syscall5 { 63 }
const              Inst.syscall6 { 64 }

fn IR.idx  1 1   {     }
fn IR.inst 1 1   { 4 + }
fn IR.data 1 1   { 8 + }
const sizeof(IR) { 16  }

const ir_stream.cap { 8192 }
auto  ir_stream.len 1
const sizeof(ir_stream) { sizeof(IR) ir_stream.cap * }
reserve ir_stream sizeof(ir_stream)

; (idx -- *IR)
fn ir_stream[] 1 1 {
	dup ir_stream.len < assert
	sizeof(IR) * ir_stream +
}

; (idx inst data)
fn ir_stream<< 3 0 {
	ir_stream.len sizeof(IR) * ir_stream +
	    swap over IR.data swap w64
	    swap over IR.inst swap w32
	              IR.idx  swap w32

	ir_stream.len ++ pop ir_stream.len
	ir_stream.len ir_stream.cap < assert
}

const   var_context.cap     { 512 }
const   sizeof(var_context) { var_context.cap sizeof(Variable) * }
auto    var_context.len 1
reserve var_context sizeof(var_context)

; (idx -- *Variable)
fn var_context[] 1 1 {
	dup var_context.len < assert
	sizeof(Variable) * var_context +
}

; (typ size a_sp idx name)
fn var_context<< 5 0 {
	var_context.len sizeof(Variable) * var_context +
	    swap over Variable.name swap w64
		swap over Variable.idx  swap w32
		swap over Variable.a_sp swap w32
		swap over Variable.size swap w32
		          Variable.typ  swap w32

	var_context.len ++ pop var_context.len
	var_context.len var_context.cap < assert
}

const   scope_context.cap     { 512 }
const   sizeof(scope_context) { scope_context.cap sizeof(Scope) * }
auto    scope_context.len 1
reserve scope_context sizeof(scope_context)

; (idx -- *IR)
fn scope_context[] 1 1 {
	dup scope_context.len < assert
	sizeof(Scope) * scope_context +
}

; (typ sp sp2 idx label_id label_id2 var_scope)
fn scope_context<< 7 0 {
	scope_context.len sizeof(Scope) * scope_context +
	    swap over Scope.var_scope swap w32
		swap over Scope.label_id  swap w32
		swap over Scope.label_id2 swap w32
		swap over Scope.idx       swap w32
		swap over Scope.sp2       swap w32
		swap over Scope.sp        swap w32
                  Scope.typ       swap w32

	scope_context.len ++ pop scope_context.len
	scope_context.len scope_context.cap < assert
}

; ( -- *Scope)
fn scope_context.top 0 1 {
	scope_context.len 0 != assert
	scope_context.len 1 - scope_context[]
}

; (idx -- *Function)
fn functions[] 1 1 {
	dup functions.len < assert
	sizeof(Function) * functions +
}

; (argc retc name start_inst end_inst a_sp is_used forbid_inline)
fn functions<< 8 0 {
	functions.len sizeof(Function) * functions +
	    swap over Function.forbid_inline swap w8
		swap over Function.is_used       swap w8
		swap over Function.a_sp          swap w32
		swap over Function.end_inst      swap w32
		swap over Function.start_inst    swap w32
		swap over Function.name          swap w64
		swap over Function.retc          swap w32
                  Function.argc          swap w32

	functions.len ++ pop functions.len
	functions.len functions.cap < assert
}

; (idx -- *Constant)
fn toplevel_constants[] 1 1 {
	dup toplevel_constants.len < assert
	sizeof(Constant) * toplevel_constants +
}

; (name inst_start tok value)
fn toplevel_constants<< 4 0 {
	toplevel_constants.len sizeof(Constant) * toplevel_constants +
	    swap over Constant.value      swap w64
		swap over Constant.tok        swap w32
		swap over Constant.inst_start swap w32
                  Constant.name       swap w64

	toplevel_constants.len ++ pop toplevel_constants.len
	toplevel_constants.len toplevel_constants.cap < assert
}

; (idx -- *Constant)
fn global_var_context[] 1 1 {
	dup global_var_context.len < assert
	sizeof(Constant) * global_var_context +
}
