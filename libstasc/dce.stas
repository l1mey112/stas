const dce.inline_cutoff { 12 }

const   slits.cap     { 1024                    }
const   sizeof(slits) { sizeof(u64) slits.cap * }
auto    slits.len     1
reserve slits         sizeof(slits)

; (u64)
fn slits<< 1 0 {
	slits.len slits.cap < assert
	slits slits.len sizeof(u64) * + swap w32
	slits.len ++ pop slits.len
}

; (idx -- u64)
fn slits[] 1 1 {
	dup slits.cap < assert
	sizeof(u64) * slits + r64
}

; (functions[idx])
fn dce.recurse_function 1 0 {
	auto fn_c 1
	functions[] pop fn_c

	fn_c Function.is_used true w8

	fn_c rFunction.end_inst 1 + fn_c rFunction.start_inst -
	dce.inline_cutoff >= if {
		fn_c Function.forbid_inline true w8
	}

;	fn_c rFunction.name string_view_to_str puts endl
;	"\tinline: "  puts fn_c rFunction.forbid_inline ! bool_to_str puts endl endl

	auto pos 1

	fn_c rFunction.start_inst pop pos

	while pos fn_c rFunction.end_inst < {
		pos ir_stream[] rIR.inst
		
		dup Inst.fn_call = if {
			pos ir_stream[] rIR.data functions[] rFunction.is_used ! if {
				pos ir_stream[] rIR.data dce.recurse_function
			}
		} elif dup dup Inst.push_str = swap Inst._assert = | {
			slits.len
			pos ir_stream[] rIR.data slits<<
			pos ir_stream[] IR.data swap w64
		}
		drop

		pos ++ pop pos
	}
	
	pos ir_stream[] rIR.inst Inst.fn_leave = assert
}

fn stas.dce 0 0 {
	main_fn_idx UINT64_MAX = if {
		"no main function" error.generic_fatal
	}

	main_fn_idx dce.recurse_function
}