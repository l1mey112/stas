include 'std.stas'

reserve is_object_file 1

include 'libstasc/stringbuffer.stas' ; handling strings
include 'libstasc/tokens.stas'       ; stas token definitions
include 'libstasc/util.stas'         ; utility functions, error handling
include 'libstasc/scanner.stas'      ; lexer/scanner, creates tokens
include 'libstasc/parserdefs.stas'   ; stas parser definitions, very large file
include 'libstasc/eval.stas'         ; constant evaluation
include 'libstasc/parser.stas'       ; stas parser, creates IR instructions
include 'libstasc/write.stas'        ; buffers + writing to files
include 'libstasc/dce.stas'          ; dead code elimination compiler pass
include 'libstasc/x86.stas'          ; stas codegen definitions and reg allocator
include 'libstasc/gen.stas'          ; stas code generator, creates x86_64 asm

fn usage 0 0 {
	; unimplemented
}

fn main 0 0 {
	argc 1 = if {
		'FATAL: Must supply files to compile\n' eputs
		1 exit
	}

	argc 2 = if {
		1 args[] "-elf" streq if {
			'FATAL: Must supply files to compile\n' eputs
			1 exit
		}
	}

	is_object_file 0 w8
	stdout pop fwrite_buffer.fd_loc

	1
	while dup argc < {
		dup args[]

		over over '-elf' streq if {
			drop drop
			is_object_file r8 if {
				'TODO: put usage here and in all the other places including above\n' eputs
				1 exit
			}
			is_object_file 1 w8
		} else {
			stas.scan_file
		}

		++
	}
	drop

	stas.parse
	stas.dce

;	endl
;	0
;	while dup functions.len < {
;		dup functions[] Function.name.write_mangled
;		endl
;		++
;	}
;	drop

	;ir_stream.dump
}