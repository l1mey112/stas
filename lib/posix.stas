include 'lib/posix/syscalls.stas'
include 'lib/posix/unistd.stas'

fn stat.st_dev     1 1 {       }
fn stat.st_ino     1 1 { 8   + }
fn stat.st_mode    1 1 { 24  + }
fn stat.st_nlink   1 1 { 16  + }
fn stat.st_uid     1 1 { 28  + }
fn stat.st_gid     1 1 { 32  + }
fn stat.st_rdev    1 1 { 40  + }

comptime ?def TARGET_LINUX if {
	const sizeof(stat)     { 144   }
	fn stat.st_size    1 1 { 48  + }
	fn stat.st_blksize 1 1 { 56  + }
	fn stat.st_blocks  1 1 { 64  + }
	fn stat.st_atim    1 1 { 72  + }
	fn stat.st_mtim    1 1 { 88  + }
	fn stat.st_ctim    1 1 { 104 + }
}
comptime ?def TARGET_FREEBSD if {
	const sizeof(stat)     { 224   }
	fn stat.st_size    1 1 { 112 + }
	fn stat.st_blksize 1 1 { 128 + }
	fn stat.st_blocks  1 1 { 120 + }
	fn stat.st_atim    1 1 { 48  + }
	fn stat.st_mtim    1 1 { 64  + }
	fn stat.st_ctim    1 1 { 80  + }
}

fn fstat 2 1 {
	sys_fstat syscall2
}

const PROT_READ     { 1 }
const PROT_WRITE    { 2 }
const PROT_EXEC     { 4 }
const PROT_NONE     { 0 }
const MAP_SHARED    { 1 }
const MAP_PRIVATE   { 2 }
const MAP_FIXED     { 16 }
comptime ?def TARGET_LINUX if {
	const MAP_ANONYMOUS 32
}
comptime ?def TARGET_FREEBSD if {
	const MAP_ANONYMOUS 4096
}
const MAP_FAILED    { 18446744073709551615 }
const MAP_PRW       { PROT_READ PROT_WRITE      | }
const MAP_PA        { MAP_PRIVATE MAP_ANONYMOUS | }

; void *mmap(void *addr, size_t len, int prot, int flags,
;            int fildes, off_t off);

fn mmap 6 1 {
	sys_mmap syscall6
}

; int munmap(void *addr, size_t len);
fn munmap 2 1 {
	sys_munmap syscall2	
}

; http://codewiki.wikidot.com/c%3asystem-calls%3aopen

const S_IRUSR { 256 } ; Set read rights for the owner to true.
const S_IWUSR { 128 } ; Set write rights for the owner to true.
const S_IXUSR { 64  } ; Set execution rights for the owner to true.
const S_IRGRP { 32  } ; Set read rights for the group to true.
const S_IWGRP { 16  } ; Set write rights for the group to true.
const S_IXGRP { 8   } ; Set execution rights for the group to true.
const S_IROTH { 4   } ; Set read rights for other users to true.
const S_IWOTH { 2   } ; Set write rights for other users to true.
const S_IXOTH { 1   } ; Set execution rights for other users to true.

const S_RWE_OWNER { S_IRUSR S_IWUSR | S_IXUSR | }

const CLOCK_MONOTONIC { 1 }

const sizeof(timespec)  { 16  }
fn timespec.tv_sec  1 1 {     }
fn timespec.tv_nsec 1 1 { 8 + }

fn rtimespec.tv_sec  1 1 { timespec.tv_sec  r64 }
fn rtimespec.tv_nsec 1 1 { timespec.tv_nsec r64 }

fn clock_gettime 2 1 {
	sys_clock_gettime syscall2
}

; (size -- ptr bool)
fn memory.mmap_anon? 1 2 {
	NULL swap MAP_PRW MAP_PA UINT64_MAX 0 mmap
	dup MAP_FAILED !=
}

; (size -- ptr)
fn memory.mmap_anon 1 1 {
	memory.mmap_anon? assert -> 'memory.mmap_anon: failed'
}