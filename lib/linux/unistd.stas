; int          execl(const char *, const char *, ...);
; int          execle(const char *, const char *, ...);
; int          execlp(const char *, const char *, ...);
; int          execv(const char *, char *const []);
; int          execve(const char *, char *const [], char *const []);
; int          execvp(const char *, char *const []);

; (filename argv[] envp[])
fn execve 3 1 {
	stub_execve syscall3
}

; (cstr -- ret)
fn chdir 1 1 {
	sys_chdir syscall1
}

; (fd -- ret)
fn close 1 1 {
	sys_close syscall1
}

; - noreturn
; (code)
fn exit 1 0 {
	sys_exit syscall1 drop
}

; ()
fn fork 0 1 {
	stub_fork syscall0
}

; (stream buf len -- count)
fn read 3 1 {
	sys_read syscall3
}

; (stream str len -- count)
fn write 3 1 {
	sys_write syscall3
}

;auto __curbrk 1
;
;; DOES NOT WORK FOR SOME REASON
;;     brk does not grow....
;
;; (-1 = ENOMEM: Out of memory)
;; (ptr -- int)
;fn brk 1 1 {
;	dup
;	sys_brk syscall1 pop __curbrk
;
;	__curbrk swap < if {
;		UINT64_MAX
;	} else {
;		0
;	}
;}
;
;; (ptr -- ptr)
;fn sbrk 1 1 {
;	__curbrk 0 = if {
;		0 brk 0 != if {
;			drop UINT64_MAX ret
;		}
;	}
;
;	dup 0 = if {
;		drop __curbrk ret
;	}
;
;	dup
;
;	__curbrk + 0 != if {
;		drop UINT64_MAX ret
;	}
;}

; int brk(void *addr);
; void *sbrk(intptr_t increment);

const   AT_FDCWD { 18446744073709551516 }
const  O_ACCMODE { 3 }
const   O_RDONLY { 0 }
const   O_WRONLY { 1 }
const     O_RDWR { 2 }
const    O_CREAT { 64 }
const     O_EXCL { 128 }
const   O_NOCTTY { 256 }
const    O_TRUNC { 512 }
const   O_APPEND { 1024 }
const O_NONBLOCK { 2048 }
const   O_NDELAY { O_NONBLOCK }
const     O_SYNC { 1052672 }
const    O_FSYNC { O_SYNC }
const    O_ASYNC { 8192 }

fn open 3 1 {
	sys_open syscall3
}

fn openat 4 1 {
	sys_openat syscall4
}

fn dup2 2 1 {
	sys_dup2 syscall2
}

fn wait4 4 1 {
	sys_wait4 syscall4
}

fn WIFSTOPPED 1 1 {
	255 &
	127 =
}

fn WIFCONTINUED 1 1 {
	65535 =
}

fn WIFSIGNALED 1 1 {
	127 &
	1 +
	1 >>
	0 >s
}

fn WTERMSIG 1 1 {
	127 &
}

fn WIFEXITED 1 1 {
	127 &
	0 =
}

fn WEXITSTATUS 1 1 {
	65280 &
	8 >>
}

; (cstr mode)
fn access 2 1 {
	sys_access syscall2
}