; ( str len -- hash )
fn hash.sdbm 2 1 {
	auto len  1   pop len
	auto str  1   pop str
	auto hash 1 0 pop hash

	0
	while dup len < {
		dup
			str u8[]
			hash 6 << +
			hash 16 << +
			hash -
		pop hash
		++
	}
	drop

	hash
}

; ( str len -- hash )
fn hash.djb2 2 1 {
	auto len  1      pop len
	auto str  1      pop str
	auto hash 1 5381 pop hash

	0
	while dup len < {
		dup
			str u8[]
			hash 5 <<
			hash +
			+
		pop hash
		++
	}
	drop

	hash
}

- inline
; ( a b -- c )
fn hash.rot 2 1 {
	over over << rot
	32 - >> |
}

; ( a b c -- 'a 'b 'c )
fn hash.mix 3 3 {
	auto c 1 pop c
	auto b 1 pop b
	auto a 1 pop a

	a c -             pop a
	a c 4 hash.rot ^  pop a
	c b +             pop c

	b a -             pop b
	b a 6 hash.rot ^  pop b
	a c +             pop a

	c b -             pop c
	c b 8 hash.rot ^  pop c
	b a +             pop b

	a c -             pop a
	a c 16 hash.rot ^ pop a
	c b +             pop c

	b a -             pop b
	b a 19 hash.rot ^ pop b
	a c +             pop a

	c b -             pop c
	c b 4 hash.rot ^  pop c
	b a +             pop b

	a b c
}

fn hash.final 3 3 {
	auto c 1 pop c
	auto b 1 pop b
	auto a 1 pop a

	c b ^             pop c
	c b 14 hash.rot - pop c

	a c ^             pop a
	a c 11 hash.rot - pop a

	b a ^             pop b
	b a 25 hash.rot - pop b

	c b ^             pop c
	c b 16 hash.rot - pop c

	a c ^             pop a
	a c 4 hash.rot -  pop a

	b a ^             pop b
	b a 14 hash.rot - pop b

	c b ^             pop c
	c b 24 hash.rot - pop c

	a b c
}

; ( a b -- c )
fn hash.wymum 2 1 {
	auto b 1 pop b
	auto a 1 pop a
	
	auto x0 1
	auto x1 1
	auto y0 1
	auto y1 1
	auto w1 1
	auto w2 1

	const mask32 4294967295
	
	a mask32 &              pop x0
	a 32 >>                 pop x1
	b mask32 &              pop y0
	b 32 >>                 pop y1
	
	x1 y0 * x0 y0 * 32 >> +
	dup mask32 & x0 y1 * + pop w1
	    32 >>              pop w2
	
	x1 y1 * w2 + w1 32 >> +
	a b *
	^
}