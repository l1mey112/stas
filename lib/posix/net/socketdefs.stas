const AF_UNSPEC 0        ; Unspecified.  
const AF_LOCAL  1        ; Local to host (pipes and file-domain).  
const AF_UNIX   AF_LOCAL ; POSIX name for AF_LOCAL.  
const AF_FILE   AF_LOCAL ; Another non-standard name for AF_LOCAL.  
const AF_INET   2        ; IP protocol family.  
comptime ?def TARGET_LINUX if {
	const AF_INET6 10 ; IP version 6.  
}
comptime ?def TARGET_FREEBSD if {
	const AF_INET6 28 ; IP version 6.  
}
const SOCK_STREAM 1 ;   /* Sequenced, reliable, connection-based byte streams.  */
const SOCK_DGRAM 2 ;   /* Connectionless, unreliable datagrams of fixed maximum length.  */
const SOCK_RAW 3 ;   /* Raw protocol interface.  */
const SOCK_RDM 4 ;   /* Reliably-delivered messages.  */
const SOCK_SEQPACKET 5 ;  /* Sequenced, reliable, connection-based, datagrams of fixed maximum length.  */
comptime ?def TARGET_LINUX if {
	const SOCK_DCCP 6 ;  /* Datagram Congestion Control Protocol.  */
	const SOCK_PACKET 10 ;  /* Linux specific way of getting packets at the dev level.  For writing rarp and other similar things on the user level. */
}
;  /* Flags to be ORed into the type parameter of socket and socketpair and
;     used for the flags parameter of paccept.  */
comptime ?def TARGET_LINUX if {
	const SOCK_CLOEXEC  524288
	const SOCK_NONBLOCK 2048
}
comptime ?def TARGET_FREEBSD if {
	const SOCK_CLOEXEC  268435456
	const SOCK_NONBLOCK 536870912
}


const INADDR_ANY       0
const INADDR_BROADCAST 4294967295
const INADDR_NONE      4294967295
const IN_LOOPBACKNET   127
const INADDR_LOOPBACK  2130706433 ; 127.0.0.1   
const sizeof(sockaddr) 16
comptime ?def TARGET_LINUX if {
	fn sockaddr_in.sin_family 1 1 {     }
	fn sockaddr_in.sin_port   1 1 { 2 + }
	fn sockaddr_in.sin_addr   1 1 { 4 + }
	const INADDR_DUMMY  3221225480
}
comptime ?def TARGET_FREEBSD if {
	fn sockaddr_in.sin_len    1 1 {     }
	fn sockaddr_in.sin_family 1 1 { 1 + }
	fn sockaddr_in.sin_port   1 1 { 2 + }
	fn sockaddr_in.sin_addr   1 1 { 4 + }
	const INADDR_DUMMY  3221225480
}

const fn htons 1 1 {
	dup 255 & 8 << swap 8 >> 255 & |
}

const fn htonl 1 1 {
	dup 255        & 24 << swap
	dup 65280      & 8  << swap
	dup 16711680   & 8  >> swap
	    4278190080 & 24 >>
	| | |
}

comptime ?def TARGET_LINUX if {
	const SOL_SOCKET 1
	const SO_ACCEPTCONN 30
	const SO_BROADCAST 6
	const SO_DONTROUTE 5
	const SO_ERROR 4
	const SO_KEEPALIVE 9
	const SO_LINGER 13
	const SO_OOBINLINE 10
	const SO_RCVBUF 8
	const SO_RCVLOWAT 18
	const SO_REUSEADDR 2
	const SO_SNDBUF 7
	const SO_SNDLOWAT 19
	const SO_TYPE 3
}
comptime ?def TARGET_FREEBSD if {
	const SOL_SOCKET 65535
	const SO_ACCEPTCONN 2
	const SO_BROADCAST 32
	const SO_DONTROUTE 16
	const SO_ERROR 4103
	const SO_KEEPALIVE 8
	const SO_LINGER 128
	const SO_OOBINLINE 256
	const SO_RCVBUF 4098
	const SO_RCVLOWAT 4100
	const SO_REUSEADDR 4
	const SO_SNDBUF 4097
	const SO_SNDLOWAT 4099
	const SO_TYPE 4104
}