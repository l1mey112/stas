const   alloc_buffer.cap  { 16 1024 * }
auto    alloc_buffer.len  1
reserve alloc_buffer.data alloc_buffer.cap

; (size)
fn salloc.guard_size 1 0 {
	alloc_buffer.len + alloc_buffer.cap < assert -> 'salloc.guard_size: static buffer length exceeded'
}

; ( -- ptr )
fn salloc.now 0 1 {
	alloc_buffer.data alloc_buffer.len +
}

; (ptr)
fn salloc.rewind 1 0 {
	alloc_buffer.data -
	dup alloc_buffer.len <= assert -> 'salloc.rewind: cannot rewind allocation stack to higher length'
	pop alloc_buffer.len
}

; (str len)
fn salloc.push 2 0 {
	dup salloc.guard_size
	dup rot
	; (len str len)
	alloc_buffer.data alloc_buffer.len +
	rot memcpy
	alloc_buffer.len + pop alloc_buffer.len
}

; (u8)
fn salloc.push_8 1 0 {
	sizeof(u8) salloc.guard_size
	alloc_buffer.data alloc_buffer.len + swap w8
	alloc_buffer.len ++ pop alloc_buffer.len
}

; (u16)
fn salloc.push_16 1 0 {
	sizeof(u16) salloc.guard_size
	alloc_buffer.data alloc_buffer.len + swap w16
	alloc_buffer.len sizeof(u16) + pop alloc_buffer.len
}

; (u32)
fn salloc.push_32 1 0 {
	sizeof(u32) salloc.guard_size
	alloc_buffer.data alloc_buffer.len + swap w32
	alloc_buffer.len sizeof(u32) + pop alloc_buffer.len
}

; (u64)
fn salloc.push_64 1 0 {
	sizeof(u64) salloc.guard_size
	alloc_buffer.data alloc_buffer.len + swap w64
	alloc_buffer.len sizeof(u64) + pop alloc_buffer.len
}

; (val len)
fn salloc.push_memset 2 0 {
	dup salloc.guard_size
	dup rot
	; (len val len)
	alloc_buffer.data alloc_buffer.len + rot memset
	; (len data val len)
	alloc_buffer.len + pop alloc_buffer.len
}

; ( ptr -- str len )
fn salloc.make_str 1 2 {
	dup alloc_buffer.data -
	    alloc_buffer.len swap -
	0 salloc.push_8
}

; ( len -- ptr )
fn salloc.alloc 1 1 {
	dup salloc.guard_size
	salloc.now swap
	alloc_buffer.len + pop alloc_buffer.len
}