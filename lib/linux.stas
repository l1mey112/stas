include 'lib/linux/syscalls.stas'
include 'lib/linux/unistd.stas'

const sizeof(stat) { 144 }
fn stat.st_dev     1 1 { 0   + }
fn stat.st_ino     1 1 { 8   + }
fn stat.st_mode    1 1 { 24  + }
fn stat.st_nlink   1 1 { 16  + }
fn stat.st_uid     1 1 { 28  + }
fn stat.st_gid     1 1 { 32  + }
fn stat.st_rdev    1 1 { 40  + }
fn stat.st_size    1 1 { 48  + }
fn stat.st_blksize 1 1 { 56  + }
fn stat.st_blocks  1 1 { 64  + }
fn stat.st_atim    1 1 { 72  + }
fn stat.st_mtim    1 1 { 88  + }
fn stat.st_ctim    1 1 { 104 + }

fn fstat 2 1 {
	sys_fstat syscall2
}

const      PROT_READ { 1 }
const     PROT_WRITE { 2 }
const      PROT_EXEC { 4 }
const      PROT_NONE { 0 }
const     MAP_SHARED { 1 }
const    MAP_PRIVATE { 2 }
const      MAP_FIXED { 16 }
const  MAP_ANONYMOUS { 32 }
const     MAP_FAILED { UINT64_MAX }

; void *mmap(void *addr, size_t len, int prot, int flags,
;            int fildes, off_t off);

fn mmap 6 1 {
	sys_mmap syscall6
}

; int munmap(void *addr, size_t len);
fn mummap 2 1 {
	sys_munmap syscall2	
}

; http://codewiki.wikidot.com/c%3asystem-calls%3aopen

const S_IRUSR { 256 } ; Set read rights for the owner to true.
const S_IWUSR { 128 } ; Set write rights for the owner to true.
const S_IXUSR { 64  } ; Set execution rights for the owner to true.
const S_IRGRP { 32  } ; Set read rights for the group to true.
const S_IWGRP { 16  } ; Set write rights for the group to true.
const S_IXGRP { 8   } ; Set execution rights for the group to true.
const S_IROTH { 4   } ; Set read rights for other users to true.
const S_IWOTH { 2   } ; Set write rights for other users to true.
const S_IXOTH { 1   } ; Set execution rights for other users to true.

const S_RWE_OWNER { S_IRUSR S_IWUSR | S_IXUSR | }