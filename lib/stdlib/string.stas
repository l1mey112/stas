; ( str len u8 -- str len )
fn string.after_delim_u8 3 2 {
	over 0 = if { ; len == 0
		drop drop drop NULL 0 ret
	}

	; (str len u8)
	
	auto ch    1 pop ch
	auto t_len 1 
	
	; (str len)
	over over +
	; (str len str+len)
	pop t_len

	swap

	; (len str)
	while dup t_len < {
		; (len str)
		dup r8 ch = if {
			++ swap -- ret
		}
			++
		swap
			--
		swap
	}
	drop
	drop

	NULL 0
}

; ( str len u8 -- 'str 'len str len )
fn string.after_delim_u8.ret_both 3 4 {
	auto a     1
	auto a.len 1

	over2 over2 pop a.len pop a

	; (str len u8)
	string.after_delim_u8 over NULL = if {
		drop drop a a.len NULL 0 ret
	}
	
	; (str len)

	a over2 swap - ; new len
	-- ; do not include delim
	rot a rot4
}

; ( str len u8 -- str len )
fn string.before_delim_u8 3 2 {
	over 0 = if { ; len == 0
		drop drop drop NULL 0 ret
	}

	; (str len u8)
	
	auto ch 1 pop ch
	
	; (str len)
	over +
	auto str 1 swap pop str

	; (str_t)
	while true {
		--

		; (str)
		dup r8 ch = if {
			str - str swap ret
		}
		
		dup str = if {
			break
		}
	}
	drop

	NULL 0
}

; ( str len u8 -- 'str 'len str len )
fn string.before_delim_u8.ret_both 3 4 {
	auto a     1
	auto a.len 1

	over2 over2 pop a.len pop a

	; (str len u8)
	string.before_delim_u8 over NULL = if {
		drop drop a a.len NULL 0 ret
	}
	
	; (str len)
	over over + ++
	; (str len nptr len)
	over a.len -- swap - rot4 rot4
}

; ( str len u8 -- bool )
fn string.starts_with_u8 3 1 {
	; (str len u8)
	over 0 = if {
		drop drop drop false
	} else {
		rot drop r8
		; (u8 u8)
		
		= if {
			true
		} else {
			false
		}
	}
}

; ( str len d_str d_len -- bool )
fn string.starts_with 4 1 {
	; (str len d_str d_len)
	over2 over < if { ; str.len < delim.len
		drop drop drop drop false ret
	}

	auto dl 1
	dup pop dl

	; (str d_str d_len len)
	rot rot drop dl rot
	; (str d_len d_str d_len)
	streq
}

; ( str len u8 -- idx )
fn string.index_of_u8 3 1 {
	; (str len u8)
	over 0 = if {
		drop drop drop false ret
	}

	auto ch 1 pop ch

	auto len 1 pop len
	auto str 1 pop str

	0
	while dup len < {
		dup str u8[] ch = if {
			ret
		}
		++
	}
	drop
	
	-1
}

; ( str len u8 -- idx )
fn string.last_index_of_u8 3 1 {
	; (str len u8)
	over 0 = if {
		drop drop drop false ret
	}

	auto ch 1 pop ch
	
	swap
	auto str 1 pop str
	
	while true {
		--
		dup str u8[] ch = if {
			ret
		}
		
		dup 0 = if {
			break
		}
	}
	drop
	
	-1
}

; ( str len u8 -- bool )
fn string.contains_u8 3 1 {
	; (str len u8)
	over 0 = if {
		drop drop drop false ret
	}

	auto ch     1 pop ch
	auto lenptr 1

	; (str len)
	over + pop lenptr

	; (str)
	while dup lenptr < {
		dup r8 ch = if {
			drop true ret
		}
		++
	}
	drop
	
	false
}

fn string.assert 2 2 {
	over assert -> 'string.assert: string is NULL'
}

; ( str len u8 -- str len )
fn string.trim_len_delim_u8 3 2 {
	auto ch 1 pop ch

	; (str len)
	while dup 0 > {
		dup -- over2 + r8 ch = if {
			--
		} else {
			break
		}
	}
}

; (u8 -- data bool)
fn char.parse_escape? 1 2 {
	dup 39 = if {
		39
	} elif dup 34 = {
		34
	} elif dup `\\` = {
		`\\`
	} elif dup `a` = {
		`\a`
	} elif dup `b` = {
		`\b`
	} elif dup `f` = {
		`\f`
	} elif dup `n` = {
		`\n`
	} elif dup `r` = {
		`\r`
	} elif dup `t` = {
		`\t`
	} elif dup `v` = {
		`\v`
	} elif dup `\`` = {
		`\``
	} else {
		drop 0 false ret
	}
	swap drop
	true
}

- inline
; (u8 -- bool)
fn char.is_whitespace 1 1 {
	dup `\r` = if {
		1
	} elif dup `\n` = {
		1
	} elif dup `\t` = {
		1
	} elif dup ` ` = {
		1
	} else {
		0
	}
	swap drop
}

; ( is_negative str len -- bool )
fn string.int_literal_overflow 3 1 {
	auto str.len 1 pop str.len
	auto str     1 pop str

	if {
		"9223372036854775808"
	} else {
		"18446744073709551615"
	}

	; (str len)

	dup str.len swap > if {
		drop drop true ret
	} elif dup str.len = {
		over
		auto strn 1 pop strn
		0
		; (len)
		while dup str.len < {
			str r8 strn r8 < if {
				break
			}

			str r8 strn r8 > if {
				drop drop drop true ret
			}
			
			str  ++ pop str
			strn ++ pop strn
			++
		}
		drop
	}
	drop drop

	false
}

; (u8 -- bool)
fn char.is_dec 1 1 {
	dup `0` >= swap `9` <= &
}

; (str len -- number bool)
fn string.to_num? 2 2 {
	auto str.len 1 pop str.len
	auto str     1 pop str

	0 0 ; (num idx)
	while dup str.len < {
		swap 10 *
		over str u8[]
			dup char.is_dec ! if {
				drop drop drop 0 false ret
			}
		48 - ; `0`
		+ swap
		++
	}
	drop
	true
}

; (str len -- number)
fn string.to_num 2 1 {
	string.to_num? assert
}

; (buf num -- str len)
fn itoa_unsafe 2 2 {
	auto buf 1
	swap pop buf

	auto pos 1
	auto len 1

	dup 0 = if {
		drop

		buf 48    w8
		buf 1 + 0 w8
		buf 1
		
		ret
	}
	
	0 pop len
	buf 21 + pop pos

	while dup 0 > {
		pos -- pop pos

		10 %%
		48 +

		pos swap w8

		len ++ pop len
	}
	drop

	;buf len + 0 w8

	pos len
}