const stdin  STDIN_FILENO
const stdout STDOUT_FILENO
const stderr STDERR_FILENO
const EOF    { UINT64_MAX }

fn endl {
	stdout "\n" write drop
}

fn eendl {
	stderr "\n" write drop
}

; (stream num)
fn fputu 2 0 {
	auto stream 1
	swap pop stream

	reserve buf 20
	auto pos 1
	auto len 1

	dup 0 = if {
		drop

		buf 48 w8
		stream buf 1 write drop
		
		ret
	}
	
	0 pop len
	buf 20 + pop pos

	while dup 0 > {
		pos -- pop pos

		10 %%
		48 +

		pos swap w8

		len ++ pop len
	}
	drop

	stream pos len write drop
}

; (stream num padding)
fn fputpu_space 3 0 {
	auto padding 1 pop padding
	auto stream  1
	swap pop stream

	reserve buf 20
	auto pos 1
	auto len 1

	dup 0 = if {
		drop

		buf 48 w8
		stream buf 1 write drop
		
		ret
	}
	
	0 pop len
	buf 20 + pop pos

	while dup 0 > {
		pos -- pop pos

		10 %%
		48 +

		pos swap w8

		len ++ pop len
	}
	drop

	len padding < if {
		padding len - while dup 0 > {
			pos -- pop pos
			pos ` ` w8
			len ++ pop len
			--
		}
		drop
	}

	stream pos len write drop
}

; (stream num padding)
fn fputpu 3 0 {
	auto padding 1 pop padding
	auto stream  1
	swap pop stream

	reserve buf 20
	auto pos 1
	auto len 1

	dup 0 = if {
		drop

		buf 48 w8
		stream buf 1 write drop
		
		ret
	}
	
	0 pop len
	buf 20 + pop pos

	while dup 0 > {
		pos -- pop pos

		10 %%
		48 +

		pos swap w8

		len ++ pop len
	}
	drop

	len padding < if {
		padding len - while dup 0 > {
			pos -- pop pos
			pos 48 w8
			len ++ pop len
			--
		}
		drop
	}

	stream pos len write drop
}

; (stream ch)
fn fgetc 1 1 {
	reserve ch 1
	ch 1 read
	0 = if {
		EOF
	} else {
		ch r8
	}
}

; (buf size stream -- str len)
fn fgets 3 2 {
	auto stream 1      pop stream
	auto buf    1 swap pop buf
	auto bufp   1 buf  pop bufp
	auto c      1
	auto count  1 0    pop count
	
	--
	while dup 0 > {
		stream fgetc pop c
		c EOF = if {
			drop NULL 0 ret
		}
		bufp c w8
		count ++ pop count
		c 10 = if {
			break
		}
		bufp  ++ pop bufp
		--
	}
	drop

	bufp 0 w8
	
	c EOF = buf bufp = & if {
		NULL 0
	} else {
		buf count
	}
}

; (num)
fn putu 1 0 {
	stdout swap fputu
}

; (num)
fn eputu 1 0 {
	stderr swap fputu
}

; (num)
fn putuln 1 0 {
	stdout swap fputu
	endl
}

; (num)
fn eputuln 1 0 {
	stderr swap fputu
	eendl
}

; (num padding)
fn putpu 2 0 {
	stdout rot fputpu
}

; (num padding)
fn eputpu 2 0 {
	stderr rot fputpu
}

; (str len)
fn puts 2 0 {
	stdout rot write drop
}

; (str len)
fn eputs 2 0 {
	stderr rot write drop
}

; (ch)
fn putc 1 0 {
	reserve ch 1
	ch swap w8
	stdout ch 1 write drop
}

; (ch)
fn eputc 1 0 {
	reserve ch 1
	ch swap w8
	stderr ch 1 write drop
}

fn getc 0 1 {
	stdin fgetc
}


; (fd -- size)
fn fd_stat_size 1 1 {
	reserve struct_stat sizeof(stat)

	; (fd)
	struct_stat fstat 0 <s if {
		"FATAL: Failed to stat the file descriptor\n" eputs
		1 exit
	}

	struct_stat stat.st_size r64
}

; (str len -- fd)
fn fd_open_fp_readonly 2 1 {
	auto path 2
	pop path

	path drop

	O_RDONLY 0 open

	dup 0 <s if {
		"FATAL: Failed to open file '" eputs path eputs "'\n" eputs
		1 exit
	}
}

; (str len -- fd)
fn fd_new_file_for_writing 2 1 {
	auto path 2
	pop path

	path drop

	O_WRONLY O_CREAT | O_TRUNC | S_RWE_OWNER open

	dup 0 <s if {
		"FATAL: Failed to open file '" eputs path eputs "'\n" eputs
		1 exit
	}
}

; (str len -- ptr len)
fn open_and_mmap_fp 2 2 {
	auto path 2
	pop path

	auto fd 1
	path fd_open_fp_readonly pop fd

	auto len 1
	fd fd_stat_size pop len

	len 0 > if {
		0
		len
		PROT_READ
		MAP_PRIVATE
		fd
		NULL
		mmap

		dup 0 <s if {
			"FATAL: Could not mmap file '" eputs path eputs "'\n" eputs
			1 exit
		}

		len
	} else {
		NULL 0
	}

	fd close 0 <s if {
		"FATAL: Failed to close file descriptor\n" eputs
		1 exit
	}
}