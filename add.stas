include 'std.stas'

;  ( str len -- str len )
; fn try_locate_file 2 2 {
; 
; }

; ( str len -- bool )
fn is_abs_path 2 1 {
	dup 0 = if {
		drop drop false ret
	}
	drop r8 `/` =
}

; ( -- str len )
fn get_executable_path 0 2 {
	auto buf 1

	4096 salloc.alloc pop buf
	
	comptime ?def TARGET_LINUX if {
		"/proc/self/exe" drop buf 4096 readlink
		0 = assert -> 'unreachable'
		buf + salloc.rewind
		buf salloc.make_str
		ret
	}
	comptime ?def TARGET_FREEBSD if {
		auto mib   1 salloc.now pop mib
		auto bufsz 1 4096       pop bufsz

		1  salloc.push_32 ; CTL_KERN
		14 salloc.push_32 ; KERN_PROC
		12 salloc.push_32 ; KERN_PROC_PATHNAME
		-1 salloc.push_32 ; PROCESS ID

		mib 4 buf addr bufsz 0 0 sysctl
		0 = assert -> 'unreachable'
		buf strlen buf + salloc.rewind
		buf salloc.make_str
		ret
	}
	0 assert -> 'unimplemented for OSes not Linux|FreeBSD'
	NULL 0
}

; ( str len argv ignore_stdio? ignore_stderr? -- bool )
fn execute_child? 5 1 {
	auto ignore_fds 2            pop ignore_fds
	auto args       1            pop args
	auto str        2            pop str
	auto old_brk    1 salloc.now pop old_brk

	auto pid 1

	str is_abs_path if {
		str
	} else {
		str find_abs_path_of_executable? over NULL = if {
			drop drop false ret
		}
	}
	pop str

	fork pop pid
	
	pid 0 >=s assert -> 'execute_child?: `fork` invocation failed'

	pid 0 = if {
		ignore_fds | if {
			"/root/portmasterfail.txt" drop O_RDWR 0
			open 0 >s assert
		}

		str drop args envp execve errno? assert -> 'execute_child?: `execve` invocation failed'
	} else {
		auto proc_status 1
		
		while true {
			-1 addr proc_status 0 NULL
			
			wait4 -1 != assert -> 'execute_child?: `wait4` invocation failed'

			proc_status WIFEXITED if {
				proc_status WEXITSTATUS 
				dup 0 >s if {
					exit	
				} else {
					drop
				}
				break
			} elif proc_status WIFSIGNALED {
				"execute_child?: child process was terminated by signal " eputs proc_status WTERMSIG eputuln
				false ret
			}
		}
	}

	old_brk salloc.rewind
	true
}

fn main {
	auto eeee 3
		"fasm" drop
		"-h"   drop
		NULL
	pop eeee

	; get_executable_path puts endl

	; "fasm" addr eeee true false execute_child? assert -> 'failed'
	"/root/portmasterfail.txt" drop O_RDWR 0 open putuln
}