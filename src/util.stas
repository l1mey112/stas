; (str len)
fn error.generic_fatal_begin 0 0 {
	error.start_bold_error
	"FATAL: " eputs
	error.end_bold_error
}

; (str len)
fn error.generic_fatal_noexit 2 0 {
	error.generic_fatal_begin
	eputs
	10 eputc
}

; (str len)
fn error.generic_fatal 2 0 {
	error.generic_fatal_noexit
	1 exit
}

; (row col file str len)
fn error.Loc 5 0 {
	auto msg 2 pop msg
	auto ccc 3 pop ccc

	ccc
	error.start_bold_error
		opened_files[] rFileEntry.file_path_sv string_view_to_str puts ':'  puts
		swap
		1 + putu                ':'  puts
		1 + putu                ': ' puts
	error.end_bold_error
	
	msg eputs endl
	
	ccc 1
	Token.eprint_file_lok

	1 exit
}

; (idx str len)
fn error_noexit.Tok 3 0 {
	rot rot
	
	error.start_bold_error
		token_stream[] Token.location_print
	error.end_bold_error
	
	eputs endl
}

; (idx str len)
fn notice.Tok 3 0 {
	rot rot dup rot4
	
	notice.start_bold_notice
		token_stream[] Token.location_print
	notice.end_bold_notice

	eputs endl

	Token.eprint_file_tok
}

; (idx str len)
fn error.Tok 3 0 {
	over2 rot4 error_noexit.Tok
	Token.eprint_file_tok
	1 exit
}

; (idx str len -- string_view)
fn error.Tok.to_string_view 3 1 {
	reserve num_buf 21
 
	auto sv 1 new_empty_string pop sv
	rot rot
	
	sv 27 push_char sv '[1m'  push_string_view
	sv 27 push_char sv '[31m' push_string_view
		token_stream[]
		dup rToken.file
		    opened_files[] rFileEntry.file_path_sv string_view_to_str sv rot push_string_view
			sv ':'  push_string_view
		dup rToken.row 1 + num_buf swap itoa sv rot push_string_view
		    sv ':'  push_string_view
		    rToken.col 1 + num_buf swap itoa sv rot push_string_view
		    sv ': ' push_string_view
	sv 27 push_char sv '[39m' push_string_view
	sv 27 push_char sv '[22m' push_string_view
	
	sv rot push_string_view

	sv push_nul
	sv
}

; (str len)
fn log.msg.start 0 0 {
	notice.start_bold_notice
		"LOG:  " eputs
	notice.end_bold_notice
}

; (str len)
fn log.msg 2 0 {
	verbose_mode r8 if {
		log.msg.start
		eputs 10 eputc
	} else {
		drop drop
	}
}

reserve timespec_start sizeof(timespec)
const 1e9 { 1000000000 }
const 1e6 { 1000000    }
const 1e3 { 1000       }

fn log.start_bold_time 0 0 {
	27 eputc '[1m'  eputs
	27 eputc '[34m' eputs
}

fn log.end_bold_time 0 0 {
	27 eputc '[39m' eputs
	27 eputc '[22m' eputs
}

fn log.time.start 0 0 {
	verbose_mode r8 if {
		CLOCK_MONOTONIC timespec_start clock_gettime 0 <s if {
			"FATAL: Failed to get current time" eputs
			1 exit
		}
	}
}

; (str len)
fn log.time.end 2 0 {
	verbose_mode r8 if {
		log.start_bold_time
			"TIME: " eputs eputs
		
		reserve timespec_end sizeof(timespec)
		CLOCK_MONOTONIC timespec_end clock_gettime 0 <s if {
			"FATAL: Failed to get current time" eputs
			1 exit
		}

		timespec_end   rtimespec.tv_sec
		timespec_start rtimespec.tv_sec
		-
		1e9 *
		timespec_end   rtimespec.tv_nsec
		timespec_start rtimespec.tv_nsec
		-
		+
		1e6 %% swap eputu "." eputs 6 eputpu

		; printf("%lld.%.9ld", (long long)ts.tv_sec, ts.tv_nsec);

		" ms\n" eputs

		log.end_bold_time
	} else {
		drop drop
	}
}