const LF_CH           { `\n` }
const SINGLE_QUOTE_CH { 39   }
const DOUBLE_QUOTE_CH { 34   }

; (str len)
fn stas.scan_file 2 0 {
	auto file_path 2
	pop file_path

	auto open_file_pos 1

	auto data     1
	auto data.len 1

	file_path opened_files.does_fp_exist if {
		ret
	}

	-> 0 {
		file_path open_and_mmap_fp
		pop data.len pop data
	}

	opened_files.len pop open_file_pos

	file_path new_string_view
	data data.len opened_files<<

	reserve reset_outer 1 reset_outer 0 w8
	
	auto pos 1 0 pop pos
	auto row 1 0 pop row
	auto col 1 0 pop col

	reserve is_next_inc 1
	is_next_inc 0 w8

	while 1 {
		reserve is_number    1
		reserve leading_dash 1
		is_number    1 w8
		leading_dash 0 w8

		pos data.len >= if {
			break
		}
		while data pos u8[] dup char.is_whitespace {
			LF_CH = if {
				row ++ pop row
				0      pop col
			} else {
				col ++ pop col
			}
			pos ++ pop pos
			pos data.len >= if {
				break
			}	
		}
		pos data.len >= if {
			break
		}

		; TODO: check for overflow inside the 
		;       number parser

		auto start     1 pos pop start
		auto start_col 1 col pop start_col
		auto start_row 1 row pop start_row

		; (ch2 ch1 ch)

		; handle special tokens
		data pos u8[]
			dup SINGLE_QUOTE_CH = swap
			dup DOUBLE_QUOTE_CH = rot
			is_next_inc r8 if {
				`<` = if {
					true
				} else {
					false
				}
			} else {
				drop false
			}
		| | if {
			auto str_quote 1

			data pos u8[] dup `<` = if {
				drop `>` pop str_quote
			} else {
				pop str_quote
			}
			
			auto str_buf 1 new_empty_string pop str_buf

			reserve delim 1 delim 0 w8
			while 1 {
				pos ++ pop pos
				
				pos data.len >= if {
					start_row start_col open_file_pos 'unterminated string literal' error.Loc
				}

				auto ch 1
				data pos u8[] pop ch

				ch
				LF_CH = if {
					row ++ pop row
					0      pop col
				} else {
					col ++ pop col
				}

				; handle delimiters

				delim r8 if {
					data pos u8[]

					char.parse_escape? ! if {
						row col open_file_pos 'escape character does not exist' error.Loc
					}
					str_buf swap push_char

					delim 0 w8
					continue
				}

				ch str_quote = if {
					break
				}

				ch `\\` = if {
					delim 1 w8
					continue
				}

				str_buf ch push_char 

				ch LF_CH = if {
					col -- pop col
				}
			}

			str_buf push_nul

			delim r8 if {
				row col open_file_pos 'unhandled escape character' error.Loc
			}

			col ++ pop col
			pos ++ pop pos

			is_next_inc r8 if {
				auto inc_str 2

					str_buf string_view_to_str
				str_quote `>` = if {
					find_file_to_include_stasdir
				} else {
					file_path file_dir find_file_to_include
				}
				over NULL = if {
					start_row start_col open_file_pos col start_col - 'unable to locate file to include' error.Loc.len
				}
				pop inc_str

				inc_str is_dir if {
					start_row start_col open_file_pos col start_col - 'file specified to include is a directory' error.Loc.len
				}

				verbose_mode r8 if {
					log.msg.start
					"including file `" eputs
						inc_str eputs
					"`\n" eputs
				}
				
				inc_str stas.scan_file

				is_next_inc 0 w8
			} else {
				start_row start_col open_file_pos Tok.string_lit str_buf
				pos start -
				token_stream<<
			}

			continue
		} elif data pos u8[] `\`` = {
			auto ch  1
			auto len 1 0 pop len

			col ++ pop col

			while 1 {
				pos ++ pop pos
				
				pos data.len >= if {
					start_row start_col open_file_pos 'unterminated character literal' error.Loc
				}

				data pos u8[]
				dup LF_CH = if {
					row ++ pop row
					0      pop col
				} elif dup `\`` = {
					data pos -- u8[]  `\\` !=
					data pos 2 - u8[] `\\` =
					data pos  -- u8[] `\\` = & | if {
						break
					}
				} else {
					col ++ pop col
				}
				drop

				len ++ pop len
			}

			data start ++ u8[] pop ch

			len 0 = if {
				start_row start_col open_file_pos 'empty character literal' error.Loc
			} elif len 1 = ch `\\` = & {
				start_row start_col open_file_pos 'unhandled escape character' error.Loc
			} elif len 1 != {
				len 2 = ch `\\` != & len 2 > | if {
					start_row start_col open_file_pos 'character literals must contain a single character' error.Loc
				}

				data start 2 + u8[]
				char.parse_escape? ! if {
					start_row start_col open_file_pos 'escape character does not exist' error.Loc
				}
				pop ch
			}

			col ++ pop col
			pos ++ pop pos

			start_row start_col open_file_pos Tok.number_lit
				ch
			pos start -
			token_stream<<
	
			continue
		} elif data pos u8[] `;` = {
			while data pos u8[] LF_CH != {
				pos ++ pop pos
				pos data.len >= if {
					ret
				}
			}
			continue
		}

		data pos u8[] `-` = if {
			data pos ++ u8[] char.is_dec if {
				leading_dash 1 w8
				
				col ++ pop col
				pos ++ pop pos
				
				pos pop start
				col pop start_col
			}
		}

		while data pos u8[] char.is_whitespace ! {
			is_number r8 if {
				data pos u8[] char.is_dec ! if {
					is_number 0 w8
					leading_dash r8 if {
						start     -- pop start
						start_col -- pop start_col
					}
				}
			}

			col ++ pop col
			pos ++ pop pos
			pos data.len >= if {
				break
			}
		}
		reset_outer r8 if {
			reset_outer 0 w8
			continue
		}

		auto lit 2
			data start + 
			pos start -
		pop lit

		is_next_inc r8 if {
			row start_col open_file_pos 'file to include is not a string' error.Loc
		}

		is_number r8 if { ; pos start - 1 > &
			row start_col open_file_pos Tok.number_lit

			leading_dash r8 lit string.int_literal_overflow
			if {
				start_row start_col open_file_pos
					addr lit 8 + r64 ; str.len
				'number overflows' error.Loc.len
			}
			
			lit string.to_num

			leading_dash r8 if {
				negate	
			}

			pos start -
			token_stream<<
		} else {
			lit "include" streq if {
				is_next_inc 1 w8
				continue
			}

			; (row col file)
			row start_col open_file_pos

			; (row col file tok)
			lit Tok.from_str

			; (row col file tok data)
			dup Tok.name = if {
				lit new_string_view
			} else {
				0
			}

			pos start -
			token_stream<<
		}
	}

	is_next_inc r8 if {
		row col open_file_pos 'unexpected EOF when parsing file to include' error.Loc
	}
}