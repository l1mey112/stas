const   fwrite_buffer.cap     { 10 1024 * } ; 10 KiB
auto    fwrite_buffer.len     1
const   sizeof(fwrite_buffer) { fwrite_buffer.cap }
reserve fwrite_buffer         sizeof(fwrite_buffer)
auto    fwrite_buffer.fd_loc  1

fn fwrite_buffer.flush 0 0 {
	; (stream str len -- count)
	fwrite_buffer.fd_loc fwrite_buffer fwrite_buffer.len write
	fwrite_buffer.len = assert ; to_write.len == actually_wrote.len

	0 pop fwrite_buffer.len
}

; (len)
fn fwrite_buffer.assert_len 1 0 {
	dup fwrite_buffer.cap < assert
	fwrite_buffer.len + fwrite_buffer.cap >= if {
		fwrite_buffer.flush
	}
}

; (u8)
fn fwritec 1 0 {
	1 fwrite_buffer.assert_len
	fwrite_buffer.len fwrite_buffer + swap w8
	fwrite_buffer.len ++ pop fwrite_buffer.len
}

; (str len)
fn fwrite 2 0 {
	dup fwrite_buffer.assert_len
	dup rot
	fwrite_buffer fwrite_buffer.len + rot memcpy
	fwrite_buffer.len + pop fwrite_buffer.len
}

; (str len)
fn fwriteln 2 0 {
	fwrite
	`\n` fwritec
}

; (num)
fn fwriteu 1 0 {
	reserve num_buf 21
	num_buf swap itoa fwrite
}

; (num)
fn fwriteuln 1 0 {
	fwriteu
	`\n` fwritec
}

fn fendl 0 0 {
	`\n` fwritec
}

; (u8 -- bool)
fn is_alpha 1 1 {
	auto ch 1 pop ch

	ch `a` >= 
	ch `z` <=
		&
	ch `A` >= 
	ch `Z` <=
		&
	|
	ch `0` >=
	ch `9` <=
		&
	|
	
	ch `_` = |
	ch `.` = |
}

fn write_remap_ch 1 0 {
	dup `[` = if {
		"_a" fwrite
	} elif dup `]` = {
		"_b" fwrite
	} elif dup `<` = {
		"_c" fwrite
	} elif dup `>` = {
		"_d" fwrite
	} elif dup `*` = {
		"_e" fwrite
	} elif dup `&` = {
		"_f" fwrite
	} elif dup `|` = {
		"_g" fwrite
	} else {
		dup fwritec
	}
	drop
}

fn Function.name.fwrite_mangled 1 0 {
	rFunction.name string_view_to_str
	auto str.len 1 pop str.len
	auto str     1 pop str

	0
	while dup str.len < {
		dup str u8[]
		write_remap_ch
		++
	}
	drop
}