const             Tok.name { 1  }
const       Tok.string_lit { 2  }
const       Tok.number_lit { 3  }
const             Tok.l_cb { 4  }
const             Tok.r_cb { 5  }
const             Tok.arrw { 6  }
const          Tok.fn_decl { 7  }
const  Tok.trap_breakpoint { 8  }
const Tok.const_expression { 9  }
const          Tok._assert { 10 }
const             Tok.argc { 11 }
const             Tok.argv { 12 }
const              Tok.ret { 13 }
const         Tok.do_block { 14 }
const         Tok.if_block { 15 }
const       Tok.else_block { 16 }
const       Tok.elif_block { 17 }
const      Tok.while_block { 18 }
const      Tok.break_block { 19 }
const   Tok.continue_block { 20 }
const             Tok.plus { 21 }
const              Tok.sub { 22 }
const              Tok.mul { 23 }
const              Tok.div { 24 }
const              Tok.mod { 25 }
const              Tok.inc { 26 }
const              Tok.dec { 27 }
const           Tok.divmod { 28 }
const              Tok.shr { 29 }
const              Tok.shl { 30 }
const            Tok.b_and { 31 }
const             Tok.b_or { 32 }
const            Tok.b_not { 33 }
const            Tok.b_xor { 34 }
const             Tok.swap { 35 }
const              Tok.dup { 36 }
const             Tok.over { 37 }
const            Tok.over2 { 38 }
const              Tok.rot { 39 }
const             Tok.rot4 { 40 }
const             Tok.drop { 41 }
const              Tok.equ { 42 }
const             Tok.nequ { 43 }
const               Tok.gt { 44 }
const               Tok.lt { 45 }
const              Tok.gte { 46 }
const              Tok.lte { 47 }
const             Tok.s_gt { 48 }
const             Tok.s_lt { 49 }
const            Tok.s_gte { 50 }
const            Tok.s_lte { 51 }
const               Tok.w8 { 52 }
const              Tok.w16 { 53 }
const              Tok.w32 { 54 }
const              Tok.w64 { 55 }
const               Tok.r8 { 56 }
const              Tok.r16 { 57 }
const              Tok.r32 { 58 }
const              Tok.r64 { 59 }
const         Tok.syscall0 { 60 }
const         Tok.syscall1 { 61 }
const         Tok.syscall2 { 62 }
const         Tok.syscall3 { 63 }
const         Tok.syscall4 { 64 }
const         Tok.syscall5 { 65 }
const         Tok.syscall6 { 66 }
const          Tok.reserve { 67 }
const             Tok.auto { 68 }
const              Tok.pop { 69 }
const              Tok.not { 70 }
const             Tok.addr { 71 }

; (Tok -- str len)
fn Tok.to_str 1 2 {
	dup Tok.name = if {           ; 
		"name"                    ; TODO: 
	} elif dup Tok.string_lit = { ;     implement dereferencing of
		"string_lit"              ;     actual contained tok data
	} elif dup Tok.number_lit = { ; 
		"number_lit"              ;
	} elif dup Tok.l_cb = {       ;
		"{"
	} elif dup Tok.r_cb = {
		"}"
	} elif dup Tok.arrw = {
		"->"
	} elif dup Tok.fn_decl = {
		"fn"
	} elif dup Tok.trap_breakpoint = {
		"_breakpoint"
	} elif dup Tok.const_expression = {
		"const"
	} elif dup Tok._assert = {
		"assert"
	} elif dup Tok.argc = {
		"argc"
	} elif dup Tok.argv = {
		"argv"
	} elif dup Tok.ret = {
		"ret"
	} elif dup Tok.if_block = {
		"if"
	} elif dup Tok.else_block = {
		"else"
	} elif dup Tok.elif_block = {
		"elif"
	} elif dup Tok.while_block = {
		"while"
	} elif dup Tok.break_block = {
		"break"
	} elif dup Tok.continue_block = {
		"continue"
	} elif dup Tok.plus = {
		"+"
	} elif dup Tok.sub = {
		"-"
	} elif dup Tok.mul = {
		"*"
	} elif dup Tok.div = {
		"/"
	} elif dup Tok.mod = {
		"%"
	} elif dup Tok.inc = {
		"++"
	} elif dup Tok.dec = {
		"--"
	} elif dup Tok.divmod = {
		"%%"
	} elif dup Tok.shr = {
		">>"
	} elif dup Tok.shl = {
		"<<"
	} elif dup Tok.b_and = {
		"&"
	} elif dup Tok.b_or = {
		"|"
	} elif dup Tok.b_not = {
		"~"
	} elif dup Tok.not = {
		"!"
	} elif dup Tok.b_xor = {
		"^"
	} elif dup Tok.swap = {
		"swap"
	} elif dup Tok.dup = {
		"dup"
	} elif dup Tok.over = {
		"over"
	} elif dup Tok.over2 = {
		"over2"
	} elif dup Tok.rot = {
		"rot"
	} elif dup Tok.rot4 = {
		"rot4"
	} elif dup Tok.drop = {
		"drop"
	} elif dup Tok.equ = {
		"="
	} elif dup Tok.nequ = {
		"!="
	} elif dup Tok.gt = {
		">"
	} elif dup Tok.lt = {
		"<"
	} elif dup Tok.gte = {
		">="
	} elif dup Tok.lte = {
		"<="
	} elif dup Tok.s_gt = {
		">s"
	} elif dup Tok.s_lt = {
		"<s"
	} elif dup Tok.s_gte = {
		">=s"
	} elif dup Tok.s_lte = {
		"<=s"
	} elif dup Tok.w8 = {
		"w8"
	} elif dup Tok.w16 = {
		"w16"
	} elif dup Tok.w32 = {
		"w32"
	} elif dup Tok.w64 = {
		"w64"
	} elif dup Tok.r8 = {
		"r8"
	} elif dup Tok.r16 = {
		"r16"
	} elif dup Tok.r32 = {
		"r32"
	} elif dup Tok.r64 = {
		"r64"
	} elif dup Tok.syscall0 = {
		"syscall0"
	} elif dup Tok.syscall1 = {
		"syscall1"
	} elif dup Tok.syscall2 = {
		"syscall2"
	} elif dup Tok.syscall3 = {
		"syscall3"
	} elif dup Tok.syscall4 = {
		"syscall4"
	} elif dup Tok.syscall5 = {
		"syscall5"
	} elif dup Tok.syscall6 = {
		"syscall6"
	} elif dup Tok.reserve = {
		"reserve"
	} elif dup Tok.auto = {
		"auto"
	} elif dup Tok.pop = {
		"pop"
	} elif dup Tok.addr = {
		"addr"
	} else {
		0 0 0 assert -> "unreachable"
	}

	rot rot drop
}

; (str len -- Tok)
fn Tok.from_str 2 1 {
	auto str 2 pop str

	str "{" streq if {
		Tok.l_cb
	} elif str "}" streq {
		Tok.r_cb
	} elif str "->" streq {
		Tok.arrw
	} elif str "fn" streq {
		Tok.fn_decl
	} elif str "_breakpoint" streq {
		Tok.trap_breakpoint
	} elif str "const" streq {
		Tok.const_expression
	} elif str "assert" streq {
		Tok._assert
	} elif str "argc" streq {
		Tok.argc
	} elif str "argv" streq {
		Tok.argv
	} elif str "ret" streq {
		Tok.ret
	} elif str "if" streq {
		Tok.if_block
	} elif str "else" streq {
		Tok.else_block
	} elif str "elif" streq {
		Tok.elif_block
	} elif str "while" streq {
		Tok.while_block
	} elif str "break" streq {
		Tok.break_block
	} elif str "continue" streq {
		Tok.continue_block
	} elif str "+" streq {
		Tok.plus
	} elif str "-" streq {
		Tok.sub
	} elif str "*" streq {
		Tok.mul
	} elif str "/" streq {
		Tok.div
	} elif str "%" streq {
		Tok.mod
	} elif str "++" streq {
		Tok.inc
	} elif str "--" streq {
		Tok.dec
	} elif str "%%" streq {
		Tok.divmod
	} elif str ">>" streq {
		Tok.shr
	} elif str "<<" streq {
		Tok.shl
	} elif str "&" streq {
		Tok.b_and
	} elif str "|" streq {
		Tok.b_or
	} elif str "~" streq {
		Tok.b_not
	} elif str "!" streq {
		Tok.not
	} elif str "^" streq {
		Tok.b_xor
	} elif str "swap" streq {
		Tok.swap
	} elif str "dup" streq {
		Tok.dup
	} elif str "over" streq {
		Tok.over
	} elif str "over2" streq {
		Tok.over2
	} elif str "rot" streq {
		Tok.rot
	} elif str "rot4" streq {
		Tok.rot4
	} elif str "drop" streq {
		Tok.drop
	} elif str "=" streq {
		Tok.equ
	} elif str "!=" streq {
		Tok.nequ
	} elif str ">" streq {
		Tok.gt
	} elif str "<" streq {
		Tok.lt
	} elif str ">=" streq {
		Tok.gte
	} elif str "<=" streq {
		Tok.lte
	} elif str ">s" streq {
		Tok.s_gt
	} elif str "<s" streq {
		Tok.s_lt
	} elif str ">=s" streq {
		Tok.s_gte
	} elif str "<=s" streq {
		Tok.s_lte
	} elif str "w8" streq {
		Tok.w8
	} elif str "w16" streq {
		Tok.w16
	} elif str "w32" streq {
		Tok.w32
	} elif str "w64" streq {
		Tok.w64
	} elif str "r8" streq {
		Tok.r8
	} elif str "r16" streq {
		Tok.r16
	} elif str "r32" streq {
		Tok.r32
	} elif str "r64" streq {
		Tok.r64
	} elif str "syscall0" streq {
		Tok.syscall0
	} elif str "syscall1" streq {
		Tok.syscall1
	} elif str "syscall2" streq {
		Tok.syscall2
	} elif str "syscall3" streq {
		Tok.syscall3
	} elif str "syscall4" streq {
		Tok.syscall4
	} elif str "syscall5" streq {
		Tok.syscall5
	} elif str "syscall6" streq {
		Tok.syscall6
	} elif str "reserve" streq {
		Tok.reserve
	} elif str "auto" streq {
		Tok.auto
	} elif str "pop" streq {
		Tok.pop
	} elif str "addr" streq {
		Tok.addr
	} else {
		Tok.name
	} 
}

fn Token.row  1 1   {      }
fn Token.col  1 1   { 4  + }
fn Token.file 1 1   { 8  + }
fn Token.tok  1 1   { 12 + }
fn Token.data 1 1   { 16 + }
fn Token.len  1 1   { 24 + }
const sizeof(Token) { 28   }

fn rToken.row  1 1 { Token.row  r32 }
fn rToken.col  1 1 { Token.col  r32 }
fn rToken.file 1 1 { Token.file r32 }
fn rToken.tok  1 1 { Token.tok  r32 }
fn rToken.data 1 1 { Token.data r64 }
fn rToken.len  1 1 { Token.len  r32 }

const token_stream.cap { 32768 }
const sizeof(token_stream) { sizeof(Token) token_stream.cap  * }
reserve token_stream sizeof(token_stream)
auto token_stream.len 1

; (idx -- *Token)
fn token_stream[] 1 1 {
	dup token_stream.len < assert
	sizeof(Token) * token_stream +
}

; (row col file tok data len)
fn token_stream<< 6 0 {
	token_stream.len sizeof(Token) * token_stream +
	    swap over Token.len  swap w32
		swap over Token.data swap w64
	    swap over Token.tok  swap w32
	    swap over Token.file swap w32
	    swap over Token.col  swap w32
	              Token.row  swap w32

	token_stream.len ++ pop token_stream.len
	token_stream.len token_stream.cap < assert
}

; (ptr)
fn Token.location_print 1 0 {
	dup rToken.file
	    opened_files[] rFileEntry.file_path_sv string_view_to_str puts
	    ':' puts
	dup rToken.row 1 + putu
	    ':' puts
	    rToken.col 1 + putu
	    ': ' puts
}

; (str len -- displacement)
fn print_normalise_tabs 2 1 {

	; TODO: if string does not have a newline at the end, put it there

	auto len 1
	auto st  1

	over + pop len
	dup    pop st

	auto tabs 1
	0 pop tabs

	; (str)
	while dup len < {
		dup r8 `\t` = if {
			tabs ++ pop tabs
			dup st - -- st swap puts ; flush
			"    " puts
			dup ++ pop st
		}
		++
	}
	st - st swap puts
	tabs
}

const line_array_len { sizeof(u64) 10 * }

; (idx)
fn Token.print_file_loc 1 0 {
	auto t 1 token_stream[] pop t

	reserve array_data line_array_len
	reserve array      sizeof(Array64)

	array_data line_array_len array Array64.init_with_buffer_sz_bytes

	t rToken.row
	1
	t rToken.file opened_files[]
		dup  rFileEntry.data
		swap rFileEntry.len
	array
	get_lines_into_array

	0 array Array64[]
	1 array Array64[]

	print_normalise_tabs
	dup 4 * swap t rToken.col swap - +
	while dup 0 > {
		` ` putc
		--
	}
	drop

	error.start_bold_error
		t rToken.len
		while dup 0 > {
			`~` putc
			--
		}
		drop
	error.end_bold_error

	endl

;	0 assert -> 'unimplemented'
}

fn token_stream.dump 0 0 {
	0 while dup token_stream.len < {
		dup token_stream[]

			dup Token.location_print

			dup 39 putc rToken.tok Tok.to_str puts 39 putc

			dup rToken.tok Tok.name = if {
				" -> " puts rToken.data string_view_to_str puts
			} elif dup rToken.tok Tok.string_lit = {
				" -> " puts 34 putc rToken.data string_view_to_str puts 34 putc
			} elif dup rToken.tok Tok.number_lit = {
				" -> " puts rToken.data putu
			} else {
				drop
			}
		endl
		dup Token.print_file_loc
		++
	}
	drop
}