fn ASM.arg_r           1 1 {      }
fn ASM.ret_r           1 1 { 16 + }
fn ASM.arg_r_len       1 1 { 32 + }
fn ASM.ret_r_len       1 1 { 36 + }
fn ASM.s_start_idx     1 1 { 40 + }
fn ASM.s_end_idx       1 1 { 44 + }
const sizeof(ASM)          { 48   }

fn rASM.arg_r_len     1 1 { ASM.arg_r_len   r32 }
fn rASM.ret_r_len     1 1 { ASM.ret_r_len   r32 }
fn rASM.s_start_idx   1 1 { ASM.s_start_idx r32 }
fn rASM.s_end_idx     1 1 { ASM.s_end_idx   r32 }

fn wASM.s_start_idx   2 0 { swap ASM.s_start_idx swap w32 }
fn wASM.s_end_idx     2 0 { swap ASM.s_end_idx   swap w32 }

const   inline_asms.cap { 256 }
auto    inline_asms.len 1
reserve inline_asms     { inline_asms.cap sizeof(ASM) * }

; (idx -- *ASM)
fn inline_asms[] 1 1 {
	dup inline_asms.len < assert
	sizeof(ASM) * inline_asms +
}

; (*ASM)
fn *inline_asms<< 1 0 {
	inline_asms.len sizeof(ASM) * inline_asms +

	; (dest src len)
	swap sizeof(ASM) memcpy

	inline_asms.len ++ pop inline_asms.len
	inline_asms.len inline_asms.cap < assert
}

; O(n^2) !!!!!
; 
; ( Reg arr[sizeof(Reg)] len -- bool )
fn reg_exists_in_arr 3 1 {
	auto r 1 rot rot pop r

	; (arr len)
	over +
	swap

	; (len arr)
	while dup over2 < {
		dup r8 r = if {
			drop drop true ret
		}
		++		
	}
	drop
	drop
	false
}

; ( *Array32(sp) )
fn parse.inline_asm 1 0 {
	auto sp 1 pop sp

	auto as_c 1 pos pop as_c

	reserve invok_asm sizeof(ASM)
	invok_asm 0 sizeof invok_asm memset

	parse.next_eof? ! if {
		pos 'unexpected EOF in assembly invocation' error.Tok
	}
	dup Tok.l_cb != if {
		pos token_stream[] rToken.tok Tok.arrw != if {
			while true {
				pos token_stream[] rToken.tok Tok.string_lit = if {
					pos token_stream[] rToken.data string_view_to_str
					Reg.64.from_str? ! if {
						pos 'name is not a 64 bit register' error.Tok
					}
					; (Reg)
					dup invok_asm ASM.arg_r invok_asm rASM.arg_r_len reg_exists_in_arr if {
						pos '64 bit register is already on the argument list' error.Tok
					}

					invok_asm ASM.arg_r
					invok_asm rASM.arg_r_len +
					; (Reg arr)
					swap w8
					invok_asm ASM.arg_r_len p64++
				} else {
					pos 'unexpected token, expected 64 bit register string' error.Tok
				}

				; (Tok bool)
				parse.next_eof? if {
					dup Tok.l_cb = swap Tok.arrw = | if {
						break
					}
				} else {
					drop
					pos 'unexpected EOF when parsing register list' error.Tok
				}
			}
		}
		pos token_stream[] rToken.tok Tok.arrw = if {
			while true {
				; (Tok bool)
				parse.next_eof? if {
					dup Tok.l_cb = swap Tok.arrw = | if {
						break
					}
				} else {
					drop
					pos 'unexpected EOF when parsing register list' error.Tok
				}

				pos token_stream[] rToken.tok Tok.string_lit = if {
					pos token_stream[] rToken.data string_view_to_str
					Reg.64.from_str? ! if {
						pos 'name is not a 64 bit register' error.Tok
					}
					dup invok_asm ASM.ret_r invok_asm rASM.ret_r_len reg_exists_in_arr if {
						pos '64 bit register is already on the return list' error.Tok
					}
					; ( Reg )
					invok_asm ASM.ret_r
					invok_asm rASM.ret_r_len +
					; ( Reg arr )
					swap w8
					invok_asm ASM.ret_r_len p64++
				} else {
					pos 'unexpected token, expected 64 bit register string' error.Tok
				}
			}
		}
		pos token_stream[] rToken.tok Tok.l_cb != if {
			pos 'new scope must proceed after assembly invocation' error.Tok
		}
	}
	drop

	invok_asm pos ++ wASM.s_start_idx
	while true {
		; (Tok bool)
		parse.next_eof? if {
			Tok.r_cb = if {
				break
			}
		} else {
			drop
			pos 'unexpected EOF when parsing inline assembly body' error.Tok
		}

		pos token_stream[] rToken.tok Tok.string_lit != if {
			pos 'expected assembly string' error.Tok
		}
	}
	invok_asm pos wASM.s_end_idx

	invok_asm rASM.arg_r_len invok_asm rASM.ret_r_len sp as_c sp_assert_p
	Inst.asm_invoc inline_asms.len ir

	invok_asm *inline_asms<<
}