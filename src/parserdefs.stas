fn Function.argc          1 1 {      }
fn Function.retc          1 1 { 4  + }
fn Function.name          1 1 { 8  + }
fn Function.start_inst    1 1 { 16 + }
fn Function.end_inst      1 1 { 20 + }
fn Function.a_sp          1 1 { 24 + }
fn Function.is_used       1 1 { 28 + }
fn Function.forbid_inline 1 1 { 29 + }
fn Function.tail_r_label  1 1 { 30 + }
fn Function.inlined_count 1 1 { 34 + }
fn Function.attributes    1 1 { 40 + }
const sizeof(Function)        { 48   }

fn rFunction.argc           1 1 { Function.argc          r32 }
fn rFunction.retc           1 1 { Function.retc          r32 }
fn rFunction.name           1 1 { Function.name          r64 }
fn rFunction.start_inst     1 1 { Function.start_inst    r32 }
fn rFunction.end_inst       1 1 { Function.end_inst      r32 }
fn rFunction.a_sp           1 1 { Function.a_sp          r32 }
fn rFunction.is_used        1 1 { Function.is_used       r8  }
fn rFunction.forbid_inline  1 1 { Function.forbid_inline r8  }
fn rFunction.tail_r_label   1 1 { Function.tail_r_label  r32 }
fn rFunction.inlined_count  1 1 { Function.inlined_count r32 }
fn rFunction.attributes     1 1 { Function.attributes    r64 }

const   functions.cap { 512 }
auto    functions.len 1
reserve functions     { sizeof(Function) functions.cap * }

const ScopeTyp.function          { 0  }
const ScopeTyp.scope             { 1  }
const ScopeTyp.checked_scope     { 2  }
const ScopeTyp.if_block          { 3  }
const ScopeTyp.else_block        { 4  }
const ScopeTyp.else_block_scope  { 5  }
const ScopeTyp.elif_block        { 6  }
const ScopeTyp.elif_block_scope  { 7  }
const ScopeTyp.while_block       { 8  }
const ScopeTyp.while_block_scope { 9  }
const ScopeTyp.early_ret         { 10 }

fn Scope.typ       1 1 {      }
fn Scope.sp        1 1 { 4  + }
fn Scope.sp2       1 1 { 8  + }
fn Scope.idx       1 1 { 12 + }
fn Scope.label_id  1 1 { 16 + }
fn Scope.label_id2 1 1 { 20 + }
fn Scope.var_scope 1 1 { 24 + }
const sizeof(Scope)    { 28   }

fn rScope.typ       1 1 { Scope.typ       r32 }
fn rScope.sp        1 1 { Scope.sp        r32 }
fn rScope.sp2       1 1 { Scope.sp2       r32 }
fn rScope.idx       1 1 { Scope.idx       r32 }
fn rScope.label_id  1 1 { Scope.label_id  r32 }
fn rScope.label_id2 1 1 { Scope.label_id2 r32 }
fn rScope.var_scope 1 1 { Scope.var_scope r32 }

const VarTyp.buffer   { 1 }
const VarTyp.stack    { 2 }
const VarTyp.constant { 3 }

fn Variable.typ  1 1   {      }
fn Variable.size 1 1   { 4  + }
fn Variable.a_sp 1 1   { 8  + }
fn Variable.idx  1 1   { 12 + }
fn Variable.name 1 1   { 16 + }
const sizeof(Variable) { 24   }

fn rVariable.typ  1 1  { Variable.typ  r32 }
fn rVariable.size 1 1  { Variable.size r32 }
fn rVariable.a_sp 1 1  { Variable.a_sp r32 }
fn rVariable.idx  1 1  { Variable.idx  r32 }
fn rVariable.name 1 1  { Variable.name r64 }

; UNION TYPE
fn Variable.Constant.val  1 1 {  4 + }
fn rVariable.Constant.val 1 1 { Variable.Constant.val  r64 }

const              Inst.push_str { 1  }
const              Inst.push_num { 2  }
const       Inst.push_local_addr { 3  }
const   Inst.pop_local_stack_var { 4  }
const  Inst.push_local_stack_var { 5  }
const  Inst.push_global_var_name { 6  }
const  Inst.pop_global_stack_var { 7  }
const Inst.push_global_stack_var { 8  }
const             Inst.push_argc { 9  }
const             Inst.push_argv { 10 }
const           Inst.do_cond_jmp { 11 }
const                Inst.do_jmp { 12 }
const                 Inst.label { 13 }
const            Inst.fn_prelude { 14 }
const              Inst.fn_leave { 15 }
const               Inst.fn_call { 16 }
const               Inst._assert { 17 }
const                  Inst.plus { 19 }
const                   Inst.sub { 20 }
const                   Inst.mul { 21 }
const                   Inst.div { 22 }
const                   Inst.mod { 23 }
const                   Inst.inc { 24 }
const                   Inst.dec { 25 }
const                Inst.divmod { 26 }
const                   Inst.shr { 27 }
const                   Inst.shl { 28 }
const                 Inst.b_and { 29 }
const                  Inst.b_or { 30 }
const                 Inst.b_not { 31 }
const                 Inst.b_xor { 32 }
const                  Inst.swap { 33 }
const                   Inst.dup { 34 }
const                  Inst.over { 35 }
const                 Inst.over2 { 36 }
const                   Inst.rot { 37 }
const                  Inst.rot4 { 38 }
const                  Inst.drop { 39 }
const                   Inst.equ { 40 }
const                  Inst.nequ { 41 }
const                    Inst.gt { 42 }
const                    Inst.lt { 43 }
const                   Inst.gte { 44 }
const                   Inst.lte { 45 }
const                  Inst.s_gt { 46 }
const                  Inst.s_lt { 47 }
const                 Inst.s_gte { 48 }
const                 Inst.s_lte { 49 }
const                    Inst.w8 { 50 }
const                   Inst.w16 { 51 }
const                   Inst.w32 { 52 }
const                   Inst.w64 { 53 }
const                    Inst.r8 { 54 }
const                   Inst.r16 { 55 }
const                   Inst.r32 { 56 }
const                   Inst.r64 { 57 }
const                   Inst.not { 65 }
const             Inst.push_envp { 66 }
const             Inst.c_fn_call { 67 }
const             Inst.asm_invoc { 68 }

; (Inst -- str len)
fn Inst.to_str 1 2 {
	dup Inst.push_str = if {
		"push_str"
	} elif dup Inst.push_num = {
		"push_num"
	} elif dup Inst.push_local_addr = {
		"push_local_addr"
	} elif dup Inst.pop_local_stack_var = {
		"pop_local_stack_var"
	} elif dup Inst.push_local_stack_var = {
		"push_local_stack_var"
	} elif dup Inst.push_global_var_name = {
		"push_global_var_name"
	} elif dup Inst.pop_global_stack_var = {
		"pop_global_stack_var"
	} elif dup Inst.push_global_stack_var = {
		"push_global_stack_var"
	} elif dup Inst.push_argc = {
		"push_argc"
	} elif dup Inst.push_argv = {
		"push_argv"
	} elif dup Inst.do_cond_jmp = {
		"do_cond_jmp"
	} elif dup Inst.do_jmp = {
		"do_jmp"
	} elif dup Inst.label = {
		"label"
	} elif dup Inst.fn_prelude = {
		"fn_prelude"
	} elif dup Inst.fn_leave = {
		"fn_leave"
	} elif dup Inst.fn_call = {
		"fn_call"
	} elif dup Inst._assert = {
		"assert"
	} elif dup Inst.plus = {
		"plus"
	} elif dup Inst.sub = {
		"sub"
	} elif dup Inst.mul = {
		"mul"
	} elif dup Inst.div = {
		"div"
	} elif dup Inst.mod = {
		"mod"
	} elif dup Inst.inc = {
		"inc"
	} elif dup Inst.dec = {
		"dec"
	} elif dup Inst.divmod = {
		"divmod"
	} elif dup Inst.shr = {
		"shr"
	} elif dup Inst.shl = {
		"shl"
	} elif dup Inst.not = {
		"not"
	} elif dup Inst.b_and = {
		"b_and"
	} elif dup Inst.b_or = {
		"b_or"
	} elif dup Inst.b_not = {
		"b_not"
	} elif dup Inst.b_xor = {
		"b_xor"
	} elif dup Inst.swap = {
		"swap"
	} elif dup Inst.dup = {
		"dup"
	} elif dup Inst.over = {
		"over"
	} elif dup Inst.over2 = {
		"over2"
	} elif dup Inst.rot = {
		"rot"
	} elif dup Inst.rot4 = {
		"rot4"
	} elif dup Inst.drop = {
		"drop"
	} elif dup Inst.equ = {
		"equ"
	} elif dup Inst.nequ = {
		"nequ"
	} elif dup Inst.gt = {
		"gt"
	} elif dup Inst.lt = {
		"lt"
	} elif dup Inst.gte = {
		"gte"
	} elif dup Inst.lte = {
		"lte"
	} elif dup Inst.s_gt = {
		"s_gt"
	} elif dup Inst.s_lt = {
		"s_lt"
	} elif dup Inst.s_gte = {
		"s_gte"
	} elif dup Inst.s_lte = {
		"s_lte"
	} elif dup Inst.w8 = {
		"w8"
	} elif dup Inst.w16 = {
		"w16"
	} elif dup Inst.w32 = {
		"w32"
	} elif dup Inst.w64 = {
		"w64"
	} elif dup Inst.r8 = {
		"r8"
	} elif dup Inst.r16 = {
		"r16"
	} elif dup Inst.r32 = {
		"r32"
	} elif dup Inst.r64 = {
		"r64"
	} elif dup Inst.push_envp = {
		"push_envp"
	} elif dup Inst.c_fn_call = {
		"c_fn_call"
	} elif dup Inst.asm_invoc = {
		"asm_invoc"
	} else {
		0 0 0 assert -> 'unreachable'
	}

	rot rot drop
}

fn IR.idx  1 1   {     }
fn IR.inst 1 1   { 4 + }
fn IR.data 1 1   { 8 + }
const sizeof(IR) { 16  }

fn rIR.idx  1 1 { IR.idx  r32 }
fn rIR.inst 1 1 { IR.inst r32 }
fn rIR.data 1 1 { IR.data r64 }

const   ir_stream.cap { 32768 }
auto    ir_stream.len 1
reserve ir_stream     { sizeof(IR) ir_stream.cap * }

; (idx -- *IR)
fn ir_stream[] 1 1 {
	dup ir_stream.len < assert
	sizeof(IR) * ir_stream +
}

fn rFunction.start_inst.idx 1 1 { Function.start_inst r32 ir_stream[] rIR.idx }

; (idx inst data)
fn ir_stream<< 3 0 {
	ir_stream.len sizeof(IR) * ir_stream +
	    swap over IR.data swap w64
	    swap over IR.inst swap w32
	              IR.idx  swap w32

	ir_stream.len ++ pop ir_stream.len
	ir_stream.len ir_stream.cap < assert
}

fn ir_stream.dump {
	'tok[]\tdata\tinst\n\n' puts
	0
	while dup ir_stream.len < {
		dup ir_stream[]
			dup rIR.idx  putu '\t' puts
			dup rIR.data putu '\t' puts
			    rIR.inst Inst.to_str puts endl
		++
	}
	drop
}

const   var_context.cap { 1024 }
auto    var_context.len 1
reserve var_context     { var_context.cap sizeof(Variable) * }

; (idx -- *Variable)
fn var_context[] 1 1 {
	dup var_context.len < assert
	sizeof(Variable) * var_context +
}

; (typ size a_sp idx name)
fn var_context<< 5 0 {
	var_context.len sizeof(Variable) * var_context +
	    swap over Variable.name swap w64
		swap over Variable.idx  swap w32
		swap over Variable.a_sp swap w32
		swap over Variable.size swap w32
		          Variable.typ  swap w32

	var_context.len ++ pop var_context.len
	var_context.len var_context.cap < assert
}

; (val idx name)
fn var_context.Constant<< 3 0 {
	var_context.len sizeof(Variable) * var_context +
	    swap over Variable.name           swap w64
		swap over Variable.idx            swap w32
		swap over Variable.Constant.val   swap w64
		          Variable.typ VarTyp.constant w32

	var_context.len ++ pop var_context.len
	var_context.len var_context.cap < assert
}

const   scope_context.cap { 512 }
auto    scope_context.len 1
reserve scope_context     { scope_context.cap sizeof(Scope) * }

; (idx -- *Scope)
fn scope_context[] 1 1 {
	dup scope_context.len < assert
	sizeof(Scope) * scope_context +
}

; (typ sp sp2 idx label_id label_id2 var_scope)
fn scope_context<< 7 0 {
	scope_context.len sizeof(Scope) * scope_context +
	    swap over Scope.var_scope swap w32
		swap over Scope.label_id2 swap w32
		swap over Scope.label_id  swap w32
		swap over Scope.idx       swap w32
		swap over Scope.sp2       swap w32
		swap over Scope.sp        swap w32
                  Scope.typ       swap w32

	scope_context.len ++ pop scope_context.len
	scope_context.len scope_context.cap < assert
}

; ( -- *Scope)
fn scope_context.top 0 1 {
	scope_context.len 0 != assert
	scope_context.len 1 - scope_context[]
}

fn scope_context.pop_into_ptr 1 0 {
	scope_context.top sizeof(Scope) memcpy
	scope_context.len -- pop scope_context.len
}

; (idx -- *Function)
fn functions[] 1 1 {
	dup functions.len < assert
	sizeof(Function) * functions +
}

; (argc retc name start_inst end_inst a_sp is_used forbid_inline attributes)
fn functions<< 9 0 {
	functions.len sizeof(Function) * functions +
	    swap over Function.attributes    swap w64
	    swap over Function.forbid_inline swap w8
		swap over Function.is_used       swap w8
		swap over Function.a_sp          swap w32
		swap over Function.end_inst      swap w32
		swap over Function.start_inst    swap w32
		swap over Function.name          swap w64
		swap over Function.retc          swap w32
                  Function.argc          swap w32

	functions.len sizeof(Function) * functions +
		dup Function.tail_r_label  UINT32_MAX w32
		    Function.inlined_count 0          w32

	functions.len ++ pop functions.len
	functions.len functions.cap < assert
}

const FnAttribute.noinline { 1 0 << }
const FnAttribute.inline   { 1 1 << }
const FnAttribute.noreturn { 1 2 << }
const FnAttribute.noeval   { 1 3 << }

; ( str len -- FnAttribute bool )
fn FnAttribute.from_str? 2 2 {
	auto str 2 pop str

	str "noinline" streq if {
		FnAttribute.noinline
	} elif str "inline" streq {
		FnAttribute.inline
	} elif str "noreturn" streq {
		FnAttribute.noreturn
	} elif str "noeval" streq {
		FnAttribute.noeval
	} else {
		0 false
		ret
	}

	true
}

; ( FnAttribute FnAttribute -- bool )
fn FnAttribute.is_set 2 1 {
	dup rot	& =
}

; ( FnAttribute bool )
fn FnAttribute.is_conflict 1 1 {
	auto attr 1 pop attr

	attr FnAttribute.noinline FnAttribute.is_set
	attr FnAttribute.inline   FnAttribute.is_set
	& if {
		true
	} else {
		false
	}
}

auto pos 1

; ( Tok -- bool )
fn parse.lookahead? 1 1 {
	pos ++
	dup token_stream.len >= if {
		drop drop false ret
	}
	token_stream[] rToken.tok =
}

; ( -- Tok bool )
fn parse.next_eof? 0 2 {
	pos ++
	dup token_stream.len >= if {
		drop -1 false ret
	}
	token_stream[] rToken.tok
	true
	pos ++ pop pos
}

; ( Tok -- bool )
fn parse.expect? 1 1 {
	; `pos` will be unchanged on EOF
	pos ++
	dup token_stream.len >= if {
		drop drop false ret
	}
	token_stream[] rToken.tok =
	pos ++ pop pos
}

; ( -- str len bool )
fn parse.inspect_current_name? 0 3 {
	pos token_stream[] rToken.tok Tok.name = if {
		pos token_stream[] rToken.data string_view_to_str
		true
	} else {
		NULL 0 false
	}
}

; (idx str len sp)
fn error_st.Tok 4 0 {
	auto sp 1 pop sp
	error_noexit.Tok

	sp rArray32.len 0 > if {
		sp rArray32.len 1 -
		while 1 {
			dup sp Array32[] "backtrace" notice.Tok
	
			dup 0 = if {
				break
			}
			--
		}
		drop
	}

	1 exit
}

; (count pos sp)
fn sp_push_p 3 0 {
	auto sp   1 pop sp
	auto pos  1 pop pos
	auto retc 1 pop retc

	0
	while dup retc < {
		pos sp Array32<<
		++
	}
	drop
}

; (count sp)
fn sp_push 2 0 {
	pos swap sp_push_p
}

; (argc sp)
fn sp_has 2 0 {
	auto sp 1 pop sp

	sp rArray32.len > if {
		pos "not enough values to consume for operation" sp error_st.Tok
	}
}

; (argc sp pos)
fn sp_has_p 3 0 {
	auto p  1 pop p
	auto sp 1 pop sp

	sp rArray32.len > if {
		p "not enough values to consume for operation" sp error_st.Tok
	}
}

; (argc retc sp pos)
fn sp_assert_p 4 0 {
	auto p     1 pop p
	auto sp    1 pop sp
	auto retc  1 pop retc
	auto _argc 1 pop _argc
	
	_argc sp p sp_has_p
	sp
		dup rArray32.len _argc -
	wArray32.len

	retc p sp sp_push_p
}

; (argc retc sp)
fn sp_assert 3 0 {
	pos sp_assert_p
}

; (inst data)
fn ir 2 0 {
	pos rot ir_stream<<
}

; (pos inst data)
fn ir_p 3 0 {
	ir_stream<<
}

fn CFunction.name       1 1 {      }
fn CFunction.arg_arr    1 1 { 8  + }
fn CFunction.arg_count  1 1 { 16 + }
fn CFunction.return     1 1 { 20 + }
fn CFunction.idx        1 1 { 24 + }
const sizeof(CFunction)     { 28   }

fn rCFunction.name      1 1 { CFunction.name      r64 }
fn rCFunction.arg_count 1 1 { CFunction.arg_count r32 }
fn rCFunction.idx       1 1 { CFunction.idx       r32 }
fn rCFunction.return    1 1 { CFunction.return    r32 }

const   cfunctions.cap { 256 }
auto    cfunctions.len 1
reserve cfunctions     { cfunctions.cap sizeof(CFunction) * }

; (idx -- *CFunction)
fn cfunctions[] 1 1 {
	dup cfunctions.len < assert
	sizeof(CFunction) * cfunctions +
}

; (name return idx *Array32)
fn cfunctions<< 4 0 {
	auto arr 1 pop arr
	auto cf  1 cfunctions.len sizeof(CFunction) * cfunctions + pop cf
	
	cf CFunction.idx    swap w32
	cf CFunction.return swap w32
	cf CFunction.name   swap w64

	cf CFunction.arg_count arr rArray32.len w32

	0 while dup 6 < {
		dup arr Array32[]? ! if {
			drop break
		}
		; (idx val)
		over cf CFunction.arg_arr +
		swap w8
		++
	} drop

	cfunctions.len ++ pop cfunctions.len
	cfunctions.len cfunctions.cap < assert
}