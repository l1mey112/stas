auto label_c 1

fn label_allocate 0 1 {
	label_c dup ++ pop label_c
}

auto main_fn_idx          1
auto function_context     1
auto function_context_idx 1
auto function_attributes  1

; ( str len -- idx )
fn name_get_function_idx 2 1 {
	functions.len 0 = if {
		drop drop
		-1
		ret
	}

	auto lit 2 pop lit

	0
	while dup functions.len < {
		dup functions[] rFunction.name string_view_to_str
		lit streq if {
			ret
		}
		++
	}
	drop
	-1
}

; ( str len -- idx )
fn name_get_cextern_function_idx 2 1 {
	cfunctions.len 0 = if {
		drop drop
		-1
		ret
	}

	auto lit 2 pop lit

	0
	while dup cfunctions.len < {
		dup cfunctions[] rCFunction.name string_view_to_str
		lit streq if {
			ret
		}
		++
	}
	drop
	-1
}

; ( str len search_idx -- idx )
fn search_variable_name 3 1 {
	auto search_p 1 pop search_p

	var_context.len search_p <= if {
		drop drop
		-1
		ret
	}

	auto lit 2 pop lit

	var_context.len 1 -
	while 1 {
		dup var_context[] rVariable.name string_view_to_str
		lit streq if {
			ret
		}

		dup search_p = if {
			break
		}
		--
	}
	drop
	-1
}


; ( str len -- idx )
fn search_variable_name_global 2 1 {
	auto lit 2 pop lit

	scope_context.len 0 > if {
		0 scope_context[] rScope.var_scope ; fn scope top
	} else {
		var_context.len
	}
	0
	; (cap idx)
	while dup over2 < {
		dup var_context[] rVariable.name string_view_to_str
		lit streq if {
			swap drop
			ret
		}
		++
	}
	drop drop
	-1
}

; ( -- bool )
fn is_in_function 0 1 {
	0
	while dup scope_context.len < {
		dup scope_context[] rScope.typ ScopeTyp.function = if {
			drop true ret
		}
		++
	}
	drop
	false
}

fn parse.push_empty_scope {
	; (typ sp sp2 idx label_id label_id2 var_scope)
		ScopeTyp.scope
		0
		0
		pos
		0
		0
		var_context.len
	scope_context<<
}

fn parse.push_early_ret {
	scope_context.len sizeof(Scope) * scope_context +
	dup Scope.typ ScopeTyp.early_ret w32
	    Scope.idx 0                  w32

	scope_context.len ++ pop scope_context.len
	scope_context.len scope_context.cap < assert
}

fn parse.push_early_ret_with_pos {
	scope_context.len sizeof(Scope) * scope_context +
	dup Scope.typ ScopeTyp.early_ret w32
	    Scope.idx pos                w32

	scope_context.len ++ pop scope_context.len
	scope_context.len scope_context.cap < assert
}

; ( str len -- bool )
fn parse.search_scoped_var 2 1 {
	; (str len)
	scope_context.len 0 > if {
		scope_context.top rScope.var_scope
	} else {
		0
	}
	; (str len search_p)
	search_variable_name
}

fn parse.duplicate_name {
	auto str 2
		pos token_stream[] rToken.data string_view_to_str
	pop str

	str parse.search_scoped_var
	dup -1 != if {
		pos 'name is already an existing variable' error_noexit.Tok
		var_context[] rVariable.idx ++ 'variable declared here' notice.Tok
		1 exit
	} else {
		drop
	}
	str name_get_function_idx
	dup -1 != if {
		pos 'name is already an existing function' error_noexit.Tok
		functions[] rFunction.start_inst ir_stream[] rIR.idx ++ 'function declared here' notice.Tok
		1 exit
	} else {
		drop
	}
	str name_get_cextern_function_idx
	dup -1 != if {
		pos 'name is already an existing C extern function' error_noexit.Tok
		cfunctions[] rCFunction.idx ++ 'function declared here' notice.Tok
		1 exit
	} else {
		drop
	}
}

; ( *Array32(sp) )
fn parse.fn_decl 1 0 {
	auto sp    1 pop sp
	auto _argc 1
	auto _retc 1
	auto fn_c  1 pos pop fn_c
	
	Tok.name parse.expect? ! if {
		pos 'function name must not be an intrinsic' error.Tok
	}

	auto name 2
		pos token_stream[] rToken.data string_view_to_str
	pop name
	
	name drop r8 `_` = if {
		pos 'a function name cannot begin with an an underscore' error.Tok
	}
	
	parse.duplicate_name

	parse.next_eof? ! if {
		pos 'unexpected EOF in function declaration' error.Tok
	}
	dup Tok.l_cb = if {
		0 pop _argc
		0 pop _retc
	} elif dup Tok.number_lit = {
		Tok.number_lit parse.expect? ! if {
			pos 'function return and argument counts must be numbers' error.Tok
		}

		fn_c 2 + token_stream[] rToken.data pop _argc
		fn_c 3 + token_stream[] rToken.data pop _retc

		Tok.l_cb parse.expect? ! if {
			pos 'new scope must proceed after function header' error.Tok
		}
	} else {
		pos 'unexpected token in function declaration' error.Tok
	}
	drop

	function_attributes FnAttribute.is_conflict if {
		fn_c 'function attributes conflict' error.Tok
	}

	functions.len sizeof(Function) * functions + pop function_context
	functions.len                                pop function_context_idx
		_argc
		_retc
		fn_c ++ token_stream[] rToken.data
		ir_stream.len
		0 ; end_inst
		0 ; a_sp
		name 'main' streq if {
			function_attributes FnAttribute.inline FnAttribute.is_set if {
				fn_c 'the main function is not inlinable' error.Tok
			}
			function_attributes FnAttribute.const FnAttribute.is_set if {
				fn_c -- 'the main function may not be const' error.Tok
			}

			_argc 0 !=
			_retc 0 != | if {
				fn_c 'the main function must accept and return zero values' error.Tok
			}

			functions.len pop main_fn_idx
			1 1 ; is_used, forbid_inline
		} else {
			0 ; is_used

			function_attributes FnAttribute.noinline FnAttribute.is_set if {
				1
			} else {
				0
			}
		}
		function_attributes
	functions<<

	sp rArray32.len 0 = assert

	fn_c Inst.fn_prelude function_context_idx ir_p
	_argc fn_c sp sp_push_p

	; 0 pop function_attributes

	; (typ sp sp2 idx label_id label_id2 var_scope)
		ScopeTyp.function
		0
		0
		pos
		0
		0
		var_context.len
	scope_context<<
}
			
; ( *Array32(sp) )
fn parse.assert 1 0 {
	auto sp 1 pop sp
	
	sp rArray32.len 0 = if {
		pos 'no value on stack to consume for assertion' error.Tok
	}
	sp Array32.len p64--

	; Inst._assert

	auto contains_message 1
	false pop contains_message

	; ( Tok -- bool )

	pos 2 + token_stream.len < if {
		pos 1 + token_stream[] rToken.tok Tok.arrw       = 
		pos 2 + token_stream[] rToken.tok Tok.string_lit =
		& if {
			true pop contains_message
		}
	}

	auto sv 1			
	pos '' error.Tok.to_string_view pop sv

	contains_message if {	
		sv "assertation failed, '" push_string_view
		sv
			pos 2 + token_stream[] rToken.data string_view_to_str
		push_string_view
		sv "'\n" push_string_view
		sv push_nul

		Inst._assert sv ir
		pos 2 + pop pos
	} else {
		sv 'assertation failed\n' push_string_view
		sv push_nul
		
		Inst._assert sv ir
	}
}

; ( *Array32(sp) )
fn parse.handle_var_interaction 1 0 {
	auto sp     1 pop sp
	auto typ 1

	pos token_stream[] rToken.tok pop typ

	Tok.name parse.expect? ! if {
		pos 'expected variable name' error.Tok
	}

	auto str 2
		pos token_stream[] rToken.data string_view_to_str
	pop str

	auto f_idx 1

	str 0 search_variable_name pop f_idx

	f_idx -1 != if {
		auto var       1
		auto is_global 1 

		f_idx var_context[] pop var
		
		is_in_function ! if {
			true
		} else {
			f_idx 0 scope_context[] rScope.var_scope <
		} pop is_global

		typ Tok.sizeof = if {
			var rVariable.typ VarTyp.constant = if {
				pos 'cannot get the size of a constant' error.Tok
			}
			Inst.push_num var rVariable.size ir
			1 pos -- sp sp_push_p
		} else {
			var rVariable.typ
			dup VarTyp.stack = if {
				typ Tok.pop = if {
					auto to_pop 1
					var rVariable.size 8 / pop to_pop

					sp rArray32.len to_pop < if {
						pos 'not enought values on the stack to pop into an automatic variable' sp error_st.Tok
					}

					sp
						dup rArray32.len to_pop -
					wArray32.len

					is_global if {
						; f_idx eputu `\n` eputc
						Inst.pop_global_stack_var f_idx ir
					} else {
						Inst.pop_local_stack_var
							to_pop 32 <<
							var rVariable.a_sp |
						ir
					}
				} elif typ Tok.addr = {
					1 pos -- sp sp_push_p

					is_global if {
						Inst.push_global_var_name f_idx ir
					} else {
						Inst.push_local_addr
							var rVariable.a_sp
						ir	
					}
				} else {
					0 assert -> 'unreachable'
				}
			} elif dup VarTyp.buffer = {
				typ Tok.pop = if {
					pos 'cannot pop into a buffer' error.Tok
				} elif typ Tok.addr = {
					pos 'cannot get address of a buffer, buffer is already an address' error.Tok
				}
			} elif dup VarTyp.constant = {
				typ Tok.pop = if {
					pos 'cannot edit a constant' error.Tok
				} elif typ Tok.addr = {
					pos 'cannot get address of a constant as it does not reside in memory' error.Tok
				}
			} else {
				0 assert -> 'unreachable'
			}
			drop
		}
	} else {
		pos 'unknown variable' error.Tok
	}
}

; ( *Array32(sp) bool )
fn parse.basic_token? 1 1 {
	auto sp 1 pop sp
	pos token_stream[] rToken.tok

	; fn ir   (inst data)
	; fn ir_p (pos inst data)

	dup Tok.sizeof = if {
		sp parse.handle_var_interaction
	} elif dup Tok.number_lit = {
		Inst.push_num pos token_stream[] rToken.data ir
		1 sp sp_push
	} elif dup Tok.plus = {
		Inst.plus 0 ir
		2 1 sp sp_assert
	} elif dup Tok.sub = {
		Inst.sub 0 ir
		2 1 sp sp_assert
	} elif dup Tok.mul = {
		Inst.mul 0 ir
		2 1 sp sp_assert
	} elif dup Tok.div = {
		Inst.div 0 ir
		2 1 sp sp_assert
	} elif dup Tok.mod = {
		Inst.mod 0 ir
		2 1 sp sp_assert
	} elif dup Tok.inc = {
		Inst.inc 0 ir
		1 1 sp sp_assert
	} elif dup Tok.dec = {
		Inst.dec 0 ir
		1 1 sp sp_assert
	} elif dup Tok.divmod = {
		Inst.divmod 0 ir
		2 2 sp sp_assert
	} elif dup Tok.shr = {
		Inst.shr 0 ir
		2 1 sp sp_assert
	} elif dup Tok.shl = {
		Inst.shl 0 ir
		2 1 sp sp_assert
	} elif dup Tok.b_and = {
		Inst.b_and 0 ir
		2 1 sp sp_assert
	} elif dup Tok.b_or = {
		Inst.b_or 0 ir
		2 1 sp sp_assert
	} elif dup Tok.b_not = {
		Inst.b_not 0 ir
		1 1 sp sp_assert
	} elif dup Tok.not = {
		Inst.not 0 ir
		1 1 sp sp_assert
	} elif dup Tok.b_xor = {
		Inst.b_xor 0 ir
		2 1 sp sp_assert
	} elif dup Tok.swap = {
		Inst.swap 0 ir
		2 sp sp_has
			sp Array32.pop
			sp Array32.pop
			swap
			sp Array32<<
			sp Array32<<
	} elif dup Tok.dup = {
		Inst.dup 0 ir
		1 sp sp_has
		sp Array32.top sp Array32<<
	} elif dup Tok.over = {
		Inst.over 0 ir
		2 sp sp_has
		sp rArray32.len 2 - sp Array32[] sp Array32<<
	} elif dup Tok.over2 = {
		Inst.over2 0 ir
		3 sp sp_has
		sp rArray32.len 3 - sp Array32[] sp Array32<<
	} elif dup Tok.rot = {
		Inst.rot 0 ir
		3 sp sp_has
			sp Array32.pop
			sp Array32.pop
			sp Array32.pop
			rot rot
			sp Array32<<
			sp Array32<<
			sp Array32<<
	} elif dup Tok.rot4 = {
		Inst.rot4 0 ir
		4 sp sp_has
			sp Array32.pop
			sp Array32.pop
			sp Array32.pop
			sp Array32.pop
			rot4 rot4 rot4
			sp Array32<<
			sp Array32<<
			sp Array32<<
			sp Array32<<
	} elif dup Tok.drop = {
		Inst.drop 0 ir
		1 0 sp sp_assert
	} elif dup Tok.equ = {
		Inst.equ 0 ir
		2 1 sp sp_assert
	} elif dup Tok.nequ = {
		Inst.nequ 0 ir
		2 1 sp sp_assert
	} elif dup Tok.gt = {
		Inst.gt 0 ir
		2 1 sp sp_assert
	} elif dup Tok.lt = {
		Inst.lt 0 ir
		2 1 sp sp_assert
	} elif dup Tok.gte = {
		Inst.gte 0 ir
		2 1 sp sp_assert
	} elif dup Tok.lte = {
		Inst.lte 0 ir
		2 1 sp sp_assert
	} elif dup Tok.s_gt = {
		Inst.s_gt 0 ir
		2 1 sp sp_assert
	} elif dup Tok.s_lt = {
		Inst.s_lt 0 ir
		2 1 sp sp_assert
	} elif dup Tok.s_gte = {
		Inst.s_gte 0 ir
		2 1 sp sp_assert
	} elif dup Tok.s_lte = {
		Inst.s_lte 0 ir
		2 1 sp sp_assert
	} else {
		drop false ret
	}
	drop
	true
}

; ( -- is_early_ret )
fn parse.slurp_early_ret 0 1 {
	reserve is_early_ret 1
	is_early_ret false w8

	while
		scope_context.len 0 > if {
			scope_context.top rScope.typ ScopeTyp.early_ret = if {
				scope_context.top rScope.idx

				dup 0 != if {
					dup pos -- != if {
						++ 'unreachable code' error.Tok 
					} else {
						drop
					}
				} else {
					drop
				}
				
				true
			} else {
				false
			}
		} else {
			false
		}
	{
		is_early_ret true w8
		scope_context.len -- pop scope_context.len
	}

	is_early_ret r8
}

; ( *Array32(sp) )
fn parse.handle_close_r_cb 1 0 {
	auto    sp           1 pop sp
	reserve is_early_ret 1
	is_early_ret parse.slurp_early_ret w8

	reserve scope sizeof(Scope)
	scope scope_context.pop_into_ptr

	scope rScope.var_scope pop var_context.len

	scope rScope.typ
	dup ScopeTyp.function = if {
		function_context Function.end_inst ir_stream.len w32
		Inst.fn_leave function_context_idx ir

		is_early_ret r8 ! if {
			sp rArray32.len function_context rFunction.retc > if {
				function_context rFunction.start_inst.idx
				'unhandled data on the stack' sp error_st.Tok
			} elif sp rArray32.len function_context rFunction.retc < {
				function_context rFunction.start_inst.idx
				'not enough values on the stack on function return' sp error_st.Tok
			}
		}

		sp 0 wArray32.len 
		NULL pop function_context
		-1   pop function_context_idx
		0    pop function_attributes

		is_early_ret false w8
		is_in_function ! assert
	} elif dup ScopeTyp.while_block_scope = {
		reserve while_header sizeof(Scope)
		while_header scope_context.pop_into_ptr

		Inst.do_jmp while_header rScope.label_id ir
		Inst.label  scope        rScope.label_id ir
	} elif dup ScopeTyp.scope = {
		; nop
	} elif dup ScopeTyp.checked_scope = {
		is_early_ret r8 if {
			sp
				scope rScope.sp
			wArray32.len
		}
		sp rArray32.len scope rScope.sp > if {
			scope rScope.idx
				'scope assertation failed, more values on the stack than expected (TODO: write count)'
			sp error_st.Tok
		} elif sp rArray32.len scope rScope.sp < {
			scope rScope.idx
				'scope assertation failed, less values on the stack than expected (TODO: write count)'
			sp error_st.Tok
		}
	} elif dup ScopeTyp.if_block = {
		pos 1 + token_stream.len <
		pos 1 + token_stream[] rToken.tok Tok.else_block =
		& if {
			pos ++ pop pos

			auto lbl 1
			label_allocate pop lbl

			; (typ sp sp2 idx label_id label_id2 var_scope)
				ScopeTyp.else_block_scope
				sp rArray32.len
				is_early_ret r8 if {
					scope rScope.sp		
				} else {
					dup
				}
				pos
				lbl
				UINT32_MAX
				var_context.len
			scope_context<<
			
			sp
				scope rScope.sp
			wArray32.len
			Inst.do_jmp lbl ir

			pos ++ pop pos
			pos token_stream.len >= if {
				pos 1 - 'unexpected EOF when parsing else statement' error.Tok
			}
			pos token_stream[] rToken.tok Tok.l_cb != if {
				pos 'a scope must come after an else statement' error.Tok
			}
			Inst.label scope rScope.label_id ir
		} elif
			pos 1 + token_stream.len <
			pos 1 + token_stream[] rToken.tok Tok.elif_block =
		& {
			pos ++ pop pos

			; (typ sp sp2 idx label_id label_id2 var_scope)
				ScopeTyp.elif_block
				scope rScope.sp
				is_early_ret r8 if {
					scope rScope.sp		
				} else {
					sp rArray32.len
				}
				pos
				label_allocate
				scope rScope.label_id2
				var_context.len
			scope_context<<

			sp
				scope rScope.sp
			wArray32.len
			Inst.do_jmp scope rScope.label_id2 ir
			Inst.label  scope rScope.label_id  ir
		} else {
			is_early_ret r8 if {
				sp
					scope rScope.sp
				wArray32.len
			}
			scope rScope.sp sp rArray32.len != if {
				pos 'the stack must remain the same with single branches' sp error_st.Tok
			}
			Inst.label scope rScope.label_id ir
		}
	} elif dup ScopeTyp.elif_block_scope = {
		pos 1 + token_stream.len <
			pos 1 + token_stream[] rToken.tok
			dup  Tok.elif_block =
			swap Tok.else_block =
		| &
		if {
			pos ++ pop pos

			; (typ sp sp2 idx label_id label_id2 var_scope)
				pos token_stream[] rToken.tok
				dup Tok.elif_block = if {
					ScopeTyp.elif_block
				} elif dup Tok.else_block = {
					ScopeTyp.else_block_scope
				} else {
					0 0 assert -> 'unreachable'
				}
				swap drop

				scope rScope.sp
				scope rScope.sp2
				pos
				label_allocate
				scope rScope.label_id2
				var_context.len
			scope_context<<

			is_early_ret r8 if {
				sp
					scope rScope.sp2
				wArray32.len
			}
			scope rScope.sp2 sp rArray32.len != if {
				pos 'the stack must remain the same each with else if branch' sp error_st.Tok
			}
			sp
				scope rScope.sp
			wArray32.len

			Inst.do_jmp scope rScope.label_id2 ir
			Inst.label  scope rScope.label_id  ir

			pos token_stream[] rToken.tok Tok.else_block = if {
				pos ++ pop pos
				pos token_stream.len >= if {
					pos 1 - 'unexpected EOF when parsing else statement' error.Tok
				}
				pos token_stream[] rToken.tok Tok.l_cb != if {
					pos 'a scope must come after an else statement' error.Tok
				}
			}
		} else {
			is_early_ret r8 if {
				sp
					scope rScope.sp2
				wArray32.len
			}
			scope rScope.sp2 sp rArray32.len != if {
				pos 'the stack must remain the same with single branches' sp error_st.Tok
			}
			Inst.label scope rScope.label_id  ir
			Inst.label scope rScope.label_id2 ir
		}
	} elif dup ScopeTyp.else_block_scope = {
		is_early_ret r8 if {
			sp
				scope rScope.sp2
			wArray32.len
		}
		sp rArray32.len scope rScope.sp2 > if {
			scope rScope.idx
				'unbalanced stack on both if and else branches, else has more than expected (TODO: write count)'
			sp error_st.Tok
		} elif sp rArray32.len scope rScope.sp2 < {
			scope rScope.idx
				'unbalanced stack on both if and else branches, else has less than expected (TODO: write count)'
			sp error_st.Tok
		}
		Inst.label scope rScope.label_id ir
		scope rScope.label_id2 UINT32_MAX != if {
			Inst.label scope rScope.label_id2 ir
		}
	} elif dup ScopeTyp.comptime.ignore = {
		; TODO: implement else

		; TODO: implement popping

		scope rScope.comptime.functions pop functions.len
		scope rScope.comptime.ir_stream pop ir_stream.len
		scope rScope.comptime.var_scope pop var_context.len

		0 assert -> 'unimplemented'
	} elif dup ScopeTyp.comptime.keep = {
		; TODO: implement else
	} else {
		scope rScope.typ putuln
		
		scope rScope.idx
			'block expects body, an unhandled elif or while keyword may be the culprit'
		error.Tok
	}
	drop

	is_early_ret r8 if {
		parse.push_early_ret
	}
}

; ( *Array32(sp) )
fn parse.handle_open_l_cb 1 0 {
	auto sp 1 pop sp
	parse.slurp_early_ret drop

	scope_context.len 1 > if {	
		scope_context.top rScope.typ
		dup ScopeTyp.while_block = if {
			sp rArray32.len 0 = if {
				pos 'no value on stack to consume for while header' error.Tok
			}
			sp Array32.len p64--
			auto lbl 1
			label_allocate pop lbl

			; (typ sp sp2 idx label_id label_id2 var_scope)
				ScopeTyp.while_block_scope
				sp rArray32.len
				0
				pos
				lbl
				0
				var_context.len
			scope_context<<

			Inst.do_cond_jmp lbl ir
		} elif dup ScopeTyp.elif_block = {
			reserve scope sizeof(Scope)
			scope scope_context.pop_into_ptr

			sp rArray32.len 0 = if {
				pos 'no value on stack to consume for else if statement' error.Tok
			}
			sp Array32.len p64--
			auto lbl 1
			label_allocate pop lbl

			; (typ sp sp2 idx label_id label_id2 var_scope)
				ScopeTyp.elif_block_scope
				scope rScope.sp
				scope rScope.sp2
				pos
				lbl
				scope rScope.label_id2
				var_context.len
			scope_context<<

			Inst.do_cond_jmp lbl ir
		} else {
			parse.push_empty_scope
		}
		drop
	} else {
		parse.push_empty_scope
	}
}

; ( ScopeTyp -- idx? )
fn parse.locate_scope 1 1 {
	auto scopetyp 1 pop scopetyp

	scope_context.len 0 = if {
		-1 ret
	}

	auto f 1 false pop f

	scope_context.len 1 -
	while 1 {
		dup scope_context[] rScope.typ
		scopetyp = if {
			ret
		}

		dup 0 = if {
			break
		}
		--
	}
	drop

	-1
}

; ( *Array32(sp) )
fn parse.handle_name 1 0 {
	auto sp    1 pop sp
	auto str   2 pos token_stream[] rToken.data string_view_to_str pop str
	auto f_idx 1
	auto found 1 false pop found

	str name_get_function_idx pop f_idx
	f_idx -1 != if {
		Inst.fn_call f_idx ir

		function_context_idx f_idx = if {
			function_context Function.forbid_inline 1 w8
			function_context rFunction.attributes FnAttribute.inline FnAttribute.is_set if {
				pos 'inline functions cannot call themselves' error.Tok
			}
			function_context rFunction.attributes FnAttribute.const FnAttribute.is_set ! if {
				function_context Function.tail_r_label label_allocate w32
			}
		}

		function_context rFunction.attributes FnAttribute.const FnAttribute.is_set if {
			f_idx functions[] rFunction.attributes FnAttribute.const FnAttribute.is_set ! if {
				pos 'const functions cannot call non const functions' error.Tok
			}
		}

		f_idx functions[] rFunction.attributes
		FnAttribute.noreturn FnAttribute.is_set if {
			parse.push_early_ret_with_pos
		}

		sp rArray32.len
		f_idx functions[] rFunction.argc
		< if {
			pos 'not enough values to consume for function call' sp error_st.Tok
		}

		f_idx functions[] rFunction.argc
		f_idx functions[] rFunction.retc
		sp sp_assert

		true pop found
	}
	str name_get_cextern_function_idx pop f_idx
	f_idx -1 != if {
		Inst.c_fn_call f_idx ir

		; TODO: support attributes for cextern functions

	;	f_idx functions[] rFunction.attributes
	;	FnAttribute.noreturn FnAttribute.is_set if {
	;		parse.push_early_ret_with_pos
	;	}

		sp rArray32.len
		f_idx cfunctions[] rCFunction.arg_count
		< if {
			pos 'not enough values to consume for function call' sp error_st.Tok
		}

		f_idx cfunctions[] rCFunction.arg_count
		f_idx cfunctions[] rCFunction.return 0 = if {
			0
		} else {
			1
		}
		sp sp_assert

		true pop found
	}
	found ! if {
		str 0 search_variable_name pop f_idx

		f_idx -1 != if {
			auto var       1			
			auto is_global 1 

			f_idx var_context[] pop var
			
			is_in_function ! if {
				true
			} else {
				f_idx 0 scope_context[] rScope.var_scope <
			} pop is_global

			var rVariable.typ
			
			function_context rFunction.attributes FnAttribute.const FnAttribute.is_set if {
				dup VarTyp.constant != if {
					pos 'const functions can only invoke constant variables' error.Tok
				}	
			}
			
			dup VarTyp.buffer = if {
				is_global if {
					Inst.push_global_var_name f_idx ir
				} else {
					Inst.push_local_addr var rVariable.a_sp ir
				}
				1 sp sp_push
			} elif dup VarTyp.stack = {
				auto to_push 1
				var rVariable.size 8 / pop to_push

				is_global if {
					Inst.push_global_stack_var f_idx ir
				} else {
					Inst.push_local_stack_var
						to_push 32 <<
						var rVariable.a_sp |
					ir
				}

				to_push sp sp_push
			} elif dup VarTyp.constant = {
				Inst.push_num var rVariable.Constant.val ir
				1 sp sp_push
			} else {
				0 assert
			}
			drop
			true pop found
		}
	}
	found ! if {
		pos 'unknown function or variable' error.Tok
	}
}

fn parse.assert_const_fn_not {
	function_context NULL != if {
		function_context rFunction.attributes FnAttribute.const FnAttribute.is_set if {
			pos 'forbidden word in const function' error.Tok
		}
	}
}

; ( *Array32(sp) )
fn parse.fn_complex_tokens 1 0 {
	auto sp 1 pop sp
	pos token_stream[] rToken.tok

	dup dup Tok.pop = swap Tok.addr = | if {
		parse.assert_const_fn_not
		sp parse.handle_var_interaction
	} elif dup Tok._assert = {
		sp parse.assert
	} elif dup Tok.name = {
		sp parse.handle_name
	} elif dup Tok.if_block = {
		sp rArray32.len 0 = if {
			pos 'no value on stack to consume for if statement' error.Tok
		}
		sp Array32.len p64--

		auto lbl 1 label_allocate pop lbl

		; (typ sp sp2 idx label_id label_id2 var_scope)
			ScopeTyp.if_block
			sp rArray32.len
			0
			pos
			lbl
			label_allocate
			var_context.len
		scope_context<<

		Inst.do_cond_jmp lbl ir
		
		Tok.l_cb parse.expect? ! if {
			pos 'a scope must come after an if statement' error.Tok
		}
	} elif dup Tok.while_block = {
		auto lbl 1
		label_allocate pop lbl

		Inst.label lbl ir

		; (typ sp sp2 idx label_id label_id2 var_scope)
			ScopeTyp.while_block
			sp rArray32.len
			0
			pos
			lbl
			0
			var_context.len
		scope_context<<
	} elif dup Tok.break_block = {
		ScopeTyp.while_block_scope parse.locate_scope dup -1 = if {
			pos 'not inside while loop body' error.Tok
		}
		Inst.do_jmp swap scope_context[] rScope.label_id ir
		parse.push_early_ret_with_pos
	} elif dup Tok.continue_block = {
		ScopeTyp.while_block parse.locate_scope dup -1 = if {
			pos 'not inside while loop body' error.Tok
		}
		; dup -- scope_context[] dup rScope.typ ScopeTyp.while_block = assert -> 'TODO: zero support for nested while loops or loops with complex blocks inside its header'
		; TODO: still a todo...
		Inst.do_jmp swap scope_context[] rScope.label_id ir
		parse.push_early_ret_with_pos
	} elif dup Tok.l_cb = {
		sp parse.handle_open_l_cb
	} elif dup Tok.r_cb = {
		sp parse.handle_close_r_cb
	} elif dup Tok.ret = {
		function_context NULL != if {
			function_context rFunction.attributes FnAttribute.const FnAttribute.is_set if {
				0 assert -> 'unimplemented for const functions'
			}
		}
		Inst.fn_leave function_context_idx ir
		sp rArray32.len function_context rFunction.retc > if {
			pos 'unhandled data on the stack for early return' sp error_st.Tok
		} elif sp rArray32.len function_context rFunction.retc < {
			pos 'not enough values on the stack on early return' sp error_st.Tok
		}
		sp 0 wArray32.len
		parse.push_early_ret_with_pos
	} elif dup Tok.arrw = {
		auto arrw_c 1
		pos pop arrw_c

		Tok.number_lit parse.expect? ! if {
			pos 'a number must appear after the arrow assert operator' error.Tok
		}

		; (typ sp sp2 idx label_id label_id2 var_scope)
			ScopeTyp.checked_scope
			pos token_stream[] rToken.data sp rArray32.len +
			0
			arrw_c
			0
			0
			var_context.len
		scope_context<<

		Tok.l_cb parse.expect? ! if {
			pos 'a scope must come after the arrow assert operator' error.Tok
		}
	} elif dup Tok.string_lit = {
		parse.assert_const_fn_not
		Inst.push_str pos token_stream[] rToken.data     ir
		Inst.push_num pos token_stream[] rToken.data r64 ir
		2 sp sp_push
	} elif dup Tok.w8 = {
		parse.assert_const_fn_not
		Inst.w8 0 ir
		2 0 sp sp_assert
	} elif dup Tok.w16 = {
		parse.assert_const_fn_not
		Inst.w16 0 ir
		2 0 sp sp_assert
	} elif dup Tok.w32 = {
		parse.assert_const_fn_not
		Inst.w32 0 ir
		2 0 sp sp_assert
	} elif dup Tok.w64 = {
		parse.assert_const_fn_not
		Inst.w64 0 ir
		2 0 sp sp_assert
	} elif dup Tok.r8 = {
		parse.assert_const_fn_not
		Inst.r8 0 ir
		1 1 sp sp_assert
	} elif dup Tok.r16 = {
		parse.assert_const_fn_not
		Inst.r16 0 ir
		1 1 sp sp_assert
	} elif dup Tok.r32 = {
		parse.assert_const_fn_not
		Inst.r32 0 ir
		1 1 sp sp_assert
	} elif dup Tok.r64 = {
		parse.assert_const_fn_not
		Inst.r64 0 ir
		1 1 sp sp_assert
	} elif dup Tok.argc = {
		parse.assert_const_fn_not
		Inst.push_argc 0 ir
		1 sp sp_push
	} elif dup Tok.argv = {
		parse.assert_const_fn_not
		Inst.push_argv 0 ir
		1 sp sp_push
	} elif dup Tok.envp = {
		parse.assert_const_fn_not
		Inst.push_envp 0 ir
		1 sp sp_push
	} elif dup Tok.asm = {
		parse.assert_const_fn_not
		sp parse.inline_asm
	} else {
		; TODO:
		;     elif -> cannot start elif without if
		;     fn   -> no define function inside function
		0 assert -> 'unimplemented'
	}
	drop
}

; ( -- u64 bool )
fn parse.get_constant? 0 2 {
	; ( str len search_idx -- idx )
	pos token_stream[] rToken.data string_view_to_str 0 search_variable_name
	dup -1 = if {
		drop 0 false ret
	}
	auto var 1 var_context[] pop var

	var rVariable.typ
	VarTyp.constant != if {
		pos 'referenced variable is not a constant' error.Tok
	}

	var rVariable.Constant.val
	true
}

reserve sp_array_data_const { sizeof(u32) 1024 * }
reserve const_stack_data    { sizeof(u64) 1024 * }

; ( -- u64 )
fn parse.eval_const_expr 0 1 {
	auto start_ir 1 ir_stream.len pop start_ir

	reserve sp_array sizeof(Array32)
	sp_array_data_const
		sizeof sp_array_data_const
	sp_array Array32.init_with_buffer_sz_bytes

	reserve const_stack_array sizeof(Array64)
	const_stack_data
		sizeof const_stack_data
	const_stack_array Array64.init_with_buffer_sz_bytes

	while true {
		; (Tok bool)
		parse.next_eof? if {
			Tok.r_cb = if {
				break
			}
		} else {
			drop
			pos 'unexpected EOF when parsing constant expression' error.Tok
		}

		pos token_stream[] rToken.tok Tok.name = if {
			auto f_idx 1

			pos token_stream[] rToken.data string_view_to_str name_get_function_idx pop f_idx
			f_idx -1 != if {
				f_idx functions[] rFunction.attributes FnAttribute.const FnAttribute.is_set ! if {
					pos 'const expressions can only call const functions' error.Tok
				}

				sp_array rArray32.len
				f_idx functions[] rFunction.argc
				< if {
					pos 'not enough values to consume for function call' sp_array error_st.Tok
				}

				f_idx functions[] rFunction.argc
				f_idx functions[] rFunction.retc
				sp_array sp_assert

				Inst.fn_call f_idx ir
			} else {
				Inst.push_num
					parse.get_constant? ! if {
						pos 'unknown variable name or const function' error.Tok
					}
				ir
				1 sp_array sp_push
			}			
		} else {
			sp_array parse.basic_token? ! if {
				pos 'unsupported token inside a constant expression' error.Tok
			}
		}
	}

	start_ir ir_stream.len const_stack_array 0 eval.all_in_range

	const_stack_array rArray64.len 0 = if {
		pos 'constant expression must contain a value' error.Tok
	}
	const_stack_array rArray64.len 1 > if {
		pos 'more than one unhandled value on left on the constant expression' sp_array error_st.Tok
	}

	const_stack_array Array64.pop

	start_ir pop ir_stream.len
	const_stack_array rArray64.len 0 = assert
}

fn parse.any_variable {
	auto typ  1
	auto rs_c 1 pos pop rs_c

	pos token_stream[] rToken.tok
	dup Tok.reserve = if {
		VarTyp.buffer
	} elif dup Tok.auto = {
		VarTyp.stack
	} else {
		0
		; does not handle constants.
		0 assert -> 'unreachable'
	}
	pop typ
	drop

	Tok.name parse.expect? ! if {
		pos 'expected variable name' error.Tok
	}

	parse.duplicate_name

	parse.next_eof? ! if {
		pos 'unexpected EOF in variable declaration' error.Tok
	}
	; (Tok)
	dup Tok.name = if {
		parse.get_constant? ! if {
			pos 'unknown variable name' error.Tok
		}
	} elif dup Tok.l_cb = {
		parse.eval_const_expr
	} elif dup Tok.number_lit = {
		pos token_stream[] rToken.data
	} else {
		pos 'expected size in bytes, constant name or constant expression' error.Tok
		0
		; noreturn function
	}
	typ VarTyp.stack = if {
		dup 0 = if {
			pos 'auto variables cannot have a size of zero' error.Tok
		}
		8 *
	}
	auto size 1 pop size
	drop

	; `function_context NULL =` means toplevel

	; (typ size a_sp idx name)
		typ
		size
		function_context NULL != if {
			function_context rFunction.a_sp
		} else {
			0
		}
		rs_c
		rs_c ++ token_stream[] rToken.data
	var_context<<

	function_context NULL != if {
		function_context Function.a_sp
			function_context rFunction.a_sp size +
		w32
		function_context Function.forbid_inline 1 w8
	}
}

fn parse.const_expression {
	auto rs_c 1 pos pop rs_c

	Tok.name parse.expect? ! if {
		pos 'expected name of constant' error.Tok
	}

	auto sv 1
		pos token_stream[] rToken.data
	pop sv

	parse.duplicate_name

	Tok.l_cb parse.expect? ! if {
		pos 'a scope must follow a const to open an expression' error.Tok
	}

	; (val idx name)
		parse.eval_const_expr
		rs_c
		sv
	var_context.Constant<<
}

; ( sz )
fn parse.one_cextern_arg 0 1 {
	pos token_stream[] rToken.tok Tok.number_lit = if {
		pos token_stream[] rToken.data
		dup 64 = if {
			ret
		} elif dup 32 = {
			ret
		} elif dup 16 = {
			ret
		} elif dup 8 = {
			ret
		} else {
			pos 'argument size specification must be 8, 16, 32 or 64' error.Tok
		}
		drop
	} else {
		pos 'unexpected keyword inside C function arguments, expected a number' error.Tok
	}
}

fn parse.cextern {
	object_file r8 ! if {
		pos 'external C functions can only be used when compiling with `-c`' error.Tok
	}

	reserve argarr_data { sizeof(u32) 6 * }
	reserve argarr sizeof(Array32)

	argarr_data sizeof argarr_data argarr Array32.init_with_buffer_sz_bytes
	
	auto rs_c 1 pos pop rs_c

	Tok.name parse.expect? ! if {
		pos 'expected name of external C function' error.Tok
	}
	while true {
		; (Tok bool)
		parse.next_eof? if {
			Tok.arrw = if { break }
		} else {
			drop
			pos 'unexpected EOF when parsing external C function' error.Tok
		}

		parse.one_cextern_arg argarr Array32<<? ! if {
			pos 'external C functions with more than 6 arguments are not supported' error.Tok
		}
	}
	parse.next_eof? ! if {
		pos 'unexpected EOF when parsing external C function' error.Tok
	}
	drop

	; (name return idx *Array32)
		rs_c ++ token_stream[] rToken.data
	
		parse.inspect_current_name? if {
			'void' streq ! if {
				pos 'unexpected name, expected number or \'void\'' error.Tok
			}
			0
		} else {
			drop drop
			parse.one_cextern_arg
		}

		rs_c
		argarr
	cfunctions<<
}

reserve sp_array_data { sizeof(u32) 1024 * }

fn stas.parse {
	-1 pop main_fn_idx
	0  pop pos

	reserve sp_array sizeof(Array32)
	sp_array_data
		sizeof sp_array_data
	sp_array Array32.init_with_buffer_sz_bytes

	while pos token_stream.len < {
		pos token_stream[] rToken.tok
		dup dup Tok.reserve = swap Tok.auto = | if {
			parse.assert_const_fn_not
			parse.any_variable
		} elif dup Tok.const = {
			Tok.fn_decl parse.lookahead? is_in_function ! & if {
				pos ++ pop pos
				FnAttribute.const function_attributes |
				pop function_attributes
				sp_array parse.fn_decl
			} else {
				parse.const_expression
			}
		} elif dup Tok.cextern = {
			parse.assert_const_fn_not
			parse.cextern
		} elif dup Tok.comptime = {
			parse.assert_const_fn_not
			parse.next_eof? ! if {
				pos 'unexpected EOF in comptime declaration' error.Tok
			}

			auto val 1

			; (Tok)
			dup Tok.name = if {
				parse.get_constant? ! if {
					pos 'unknown variable name' error.Tok
				}
			} elif dup Tok.l_cb = {
				parse.eval_const_expr
			} elif dup Tok.number_lit = {
				pos token_stream[] rToken.data
			} else {
				pos 'expected constant value' error.Tok
				0
				; noreturn function
			}
			pop val
			drop

			Tok.if_block parse.expect? ! if {
				pos 'expected if block after comptime' error.Tok
			}
			Tok.l_cb parse.expect? ! if {
				pos 'expected if block after comptime' error.Tok
			}

			; TODO: implement storing and restoring the sp.len

			0 assert -> 'unimplemented'

			; (typ functions.len ir_stream.len var_context.len sp.len cfunctions.len)
				val if {
					ScopeTyp.comptime.keep
				} else {
					ScopeTyp.comptime.ignore
				}
				functions.len
				ir_stream.len
				var_context.len
				sp_array rArray32.len
				cfunctions.len
			scope_context.comptime<<

			0 assert -> 'unreachable'
		} else {
			is_in_function ! if {
				pos token_stream[] rToken.tok
				
				dup Tok.fn_decl = if {
					sp_array parse.fn_decl
				} elif dup Tok.const = {
				} elif dup Tok.sub = {
					Tok.name parse.expect? ! if {
						pos "expected name as function attribute" error.Tok
					}
					pos token_stream[]
					rToken.data string_view_to_str FnAttribute.from_str? ! if {
						pos "unknown function attribute" error.Tok
					}
					function_attributes | pop function_attributes
				} elif dup Tok._assert = {
					auto as_c 1 pos pop as_c
					auto bool 1

					Tok.l_cb parse.expect? ! if {
						pos "a scope must follow a static assert to open an expression" error.Tok
					}
					parse.eval_const_expr pop bool
					
					auto msg 1 NULL pop msg

					pos 2 + token_stream.len < if {
						pos 1 + token_stream[] rToken.tok Tok.arrw       = 
						pos 2 + token_stream[] rToken.tok Tok.string_lit =
						& if {
							pos 2 + token_stream[] rToken.data pop msg
						}
					}
					
					bool ! if {
						error.start_bold_error
							as_c token_stream[] Token.location_print
						error.end_bold_error
						
						'static assertation failed' eputs
						msg NULL != if {
							', \'' eputs
							msg string_view_to_str eputs
							'\'' eputs
						}
						endl

						as_c Token.eprint_file_tok
					}
					msg NULL != if {
						pos 2 + pop pos
					}
				} else {
					pos "unknown toplevel token" error.Tok
				}
				drop
			} else {
				sp_array parse.basic_token? ! if {
					sp_array parse.fn_complex_tokens
				}
			}
		}
		drop

		pos ++ pop pos
	}

	sp_array rArray32.len 0 = assert

	function_context NULL != if {
		token_stream.len -- "unexpected EOF when parsing function, scopes may be unclosed" error.Tok	
	}
	scope_context.len 0 = assert

;	auto var 1
;	0
;	while dup var_context.len < {
;		dup var_context[] pop var
;
;		var rVariable.name string_view_to_str eputs `\n` eputc
;		++
;	}
;	drop
;	var_context.len eputu `\n` eputc

	main_fn_idx UINT64_MAX = if {
		"no main function" error.generic_fatal
	}
}