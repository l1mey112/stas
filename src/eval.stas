auto eval.recurse_depth 1
const eval.default_recurse_depth { 12 }

; ( ir_data[idx] *Array64 -- bool )
fn eval.basic_inst 2 1 {
	auto arr     1                          pop arr
	auto ir_data 1 dup ir_stream[] rIR.data pop ir_data

	auto found 1
	true pop found

	ir_stream[] rIR.inst
	dup Inst.push_num = if {
		ir_data arr Array64<<
	} elif dup Inst.inc = arr rArray64.len 1 >= & {
		arr &Array64.top p64++
	} elif dup Inst.dec = arr rArray64.len 1 >= & {
		arr &Array64.top p64--
	} elif dup Inst.b_not = arr rArray64.len 1 >= & {
		arr &Array64.top dup r64 ~ w64
	} elif dup Inst.dup = arr rArray64.len 1 >= & {
		arr Array64.top arr Array64<<
	} elif dup Inst.drop = arr rArray64.len 1 >= & {
		arr Array64.len p64--
	} elif dup Inst.plus = arr rArray64.len 2 >= & {
		arr Array64.pop
		arr Array64.pop
		swap +
		arr Array64<<
	} elif dup Inst.sub = arr rArray64.len 2 >= & {
		arr Array64.pop
		arr Array64.pop
		swap -
		arr Array64<<
	} elif dup Inst.mul = arr rArray64.len 2 >= & {
		arr Array64.pop
		arr Array64.pop
		swap *
		arr Array64<<
	} elif dup Inst.div = arr rArray64.len 2 >= & {
		arr Array64.pop
		arr Array64.pop
		swap /
		arr Array64<<
	} elif dup Inst.mod = arr rArray64.len 2 >= & {
		arr Array64.pop
		arr Array64.pop
		swap %
		arr Array64<<
	} elif dup Inst.divmod = arr rArray64.len 2 >= & {
		arr Array64.pop
		arr Array64.pop
		swap %% swap
		arr Array64<<
		arr Array64<<
	} elif dup Inst.shr = arr rArray64.len 2 >= & {
		arr Array64.pop
		arr Array64.pop
		swap >>
		arr Array64<<
	} elif dup Inst.shl = arr rArray64.len 2 >= & {
		arr Array64.pop
		arr Array64.pop
		swap <<
		arr Array64<<
	} elif dup Inst.b_and = arr rArray64.len 2 >= & {
		arr Array64.pop
		arr Array64.pop
		swap &
		arr Array64<<
	} elif dup Inst.b_or = arr rArray64.len 2 >= & {
		arr Array64.pop
		arr Array64.pop
		swap |
		arr Array64<<
	} elif dup Inst.b_xor = arr rArray64.len 2 >= & {
		arr Array64.pop
		arr Array64.pop
		swap ^
		arr Array64<<
	} elif dup Inst.swap = arr rArray64.len 2 >= & {
		arr Array64.pop
		arr Array64.pop
		swap
		arr Array64<<
		arr Array64<<
	} elif dup Inst.over = arr rArray64.len 2 >= & {
		arr rArray64.len 2 - arr Array64[]
		arr Array64<<
	} elif dup Inst.equ = arr rArray64.len 2 >= & {
		arr Array64.pop
		arr Array64.pop
		swap =
		arr Array64<<
	} elif dup Inst.nequ = arr rArray64.len 2 >= & {
		arr Array64.pop
		arr Array64.pop
		swap !=
		arr Array64<<
	} elif dup Inst.gt = arr rArray64.len 2 >= & {
		arr Array64.pop
		arr Array64.pop
		swap >
		arr Array64<<
	} elif dup Inst.lt = arr rArray64.len 2 >= & {
		arr Array64.pop
		arr Array64.pop
		swap <
		arr Array64<<
	} elif dup Inst.gte = arr rArray64.len 2 >= & {
		arr Array64.pop
		arr Array64.pop
		swap >=
		arr Array64<<
	} elif dup Inst.lte = arr rArray64.len 2 >= & {
		arr Array64.pop
		arr Array64.pop
		swap <=
		arr Array64<<
	} elif dup Inst.s_gt = arr rArray64.len 2 >= & {
		arr Array64.pop
		arr Array64.pop
		swap >s
		arr Array64<<
	} elif dup Inst.s_lt = arr rArray64.len 2 >= & {
		arr Array64.pop
		arr Array64.pop
		swap <s
		arr Array64<<
	} elif dup Inst.s_gte = arr rArray64.len 2 >= & {
		arr Array64.pop
		arr Array64.pop
		swap >=s
		arr Array64<<
	} elif dup Inst.s_lte = arr rArray64.len 2 >= & {
		arr Array64.pop
		arr Array64.pop
		swap <=s
		arr Array64<<
	} elif dup Inst.rot = arr rArray64.len 3 >= & {
		arr Array64.pop
		arr Array64.pop
		arr Array64.pop
		rot rot
		arr Array64<<
		arr Array64<<
		arr Array64<<
	} elif dup Inst.over2 = arr rArray64.len 3 >= & {
		arr rArray64.len 3 - arr Array64[]
		arr Array64<<
	} elif dup Inst.rot4 = arr rArray64.len 4 >= & {
		arr Array64.pop
		arr Array64.pop
		arr Array64.pop
		arr Array64.pop
		rot4 rot4 rot4
		arr Array64<<
		arr Array64<<
		arr Array64<<
		arr Array64<<
	} else {
		false pop found
	}
	drop

	found
}

; ( lo hi *Array64 depth -- )
fn eval.all_in_range 4 0 {
	auto dep 1 pop dep
	auto arr 1 pop arr
	auto hi  1 pop hi

	dep eval.recurse_depth > if {
		"comptime constant functions recursion depth limit reached" error.generic_fatal
	}

	reserve label_lut_data { 256 sizeof(u32) * }
	reserve label_lut_arr  sizeof(Array32)

	label_lut_data sizeof label_lut_data label_lut_arr Array32.init_with_buffer_sz_bytes

	auto pos 1 pop pos

	; " ------ \n" puts

	; pos putuln
	; hi putuln

	; " ++++++ \n" puts

	auto walk_branch 1 -1 pop walk_branch

	while pos hi < {
		auto ins     1 pos ir_stream[] rIR.inst pop ins
		auto ir_data 1 pos ir_stream[] rIR.data pop ir_data

		ins Inst.label = if {
			
			ir_data label_lut_arr Array32<< ; value
			pos label_lut_arr     Array32<< ; position

			ir_data walk_branch = if {
				-1 pop walk_branch
			}
		} else {
			walk_branch -1 = if {
				ins Inst.fn_call = if {
					auto f_idx 1
					ir_data functions[] pop f_idx

					f_idx rFunction.start_inst ++ f_idx rFunction.end_inst arr dep ++ eval.all_in_range
				} elif ins Inst.do_cond_jmp = {
					arr Array64.pop 0 = if {
						ir_data label_lut_arr Array32.search_kv? if {
							pop pos
						} else {
							drop
							-1 walk_branch = assert
							ir_data pop walk_branch
						}
					}
				} elif ins Inst.do_jmp = {
					ir_data label_lut_arr Array32.search_kv? if {
						pop pos
					} else {
						drop
						-1 walk_branch = assert
						ir_data pop walk_branch
					}
				} else {
					; (idx)
					pos arr eval.basic_inst assert -> 'unreachable'
				}
			}
		}
		pos ++ pop pos
	}
	-1 walk_branch = assert
}