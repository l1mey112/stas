; ( lo hi *Array64 -- )
fn eval.all_in_range 3 0 {
	auto arr 1 pop arr
	auto hi  1 pop hi

	while dup hi >= {
		dup ir_stream[] rIR.inst
		;dup Inst.fn_call = if {
		;	auto fn_c 1
		;	over ir_stream[] rIR.data functions[] pop fn_c
		;	
		;	fn_c rFunction.attributes FnAttribute.const FnAttribute.is_set ! if {
		;			pos 'pure functions can only call other pure functions' error.Tok
		;	}
		;} else {
			; (idx ir)
			over arr eval.basic_inst assert -> 'unreachable'
		;}
		drop
		++
	}
	drop
}

; (ir_data[idx] *Array64 -- bool)
fn eval.basic_inst 2 1 {
	auto arr     1                          pop arr
	auto ir_data 1 dup ir_stream[] rIR.data pop ir_data

	auto found 1
	true pop found

	; ir_data putu ' -- ' puts ins Inst.to_str puts endl

	; elif ins Inst._assert {
	; 
	; }

	ir_stream[] rIR.inst
	dup Inst.push_num = if {
		ir_data arr Array64<<
	} elif dup Inst.inc = arr rArray64.len 1 >= & {
		arr &Array64.top p64++
	} elif dup Inst.dec = arr rArray64.len 1 >= & {
		arr &Array64.top p64--
	} elif dup Inst.b_not = arr rArray64.len 1 >= & {
		arr &Array64.top dup r64 ~ w64
	} elif dup Inst.dup = arr rArray64.len 1 >= & {
		arr Array64.top arr Array64<<
	} elif dup Inst.drop = arr rArray64.len 1 >= & {
		arr Array64.len p64--
	} elif dup Inst.plus = arr rArray64.len 2 >= & {
		arr Array64.pop
		arr Array64.pop
		swap +
		arr Array64<<
	} elif dup Inst.sub = arr rArray64.len 2 >= & {
		arr Array64.pop
		arr Array64.pop
		swap -
		arr Array64<<
	} elif dup Inst.mul = arr rArray64.len 2 >= & {
		arr Array64.pop
		arr Array64.pop
		swap *
		arr Array64<<
	} elif dup Inst.div = arr rArray64.len 2 >= & {
		arr Array64.pop
		arr Array64.pop
		swap /
		arr Array64<<
	} elif dup Inst.mod = arr rArray64.len 2 >= & {
		arr Array64.pop
		arr Array64.pop
		swap %
		arr Array64<<
	} elif dup Inst.divmod = arr rArray64.len 2 >= & {
		arr Array64.pop
		arr Array64.pop
		swap %% swap
		arr Array64<<
		arr Array64<<
	} elif dup Inst.shr = arr rArray64.len 2 >= & {
		arr Array64.pop
		arr Array64.pop
		swap >>
		arr Array64<<
	} elif dup Inst.shl = arr rArray64.len 2 >= & {
		arr Array64.pop
		arr Array64.pop
		swap <<
		arr Array64<<
	} elif dup Inst.b_and = arr rArray64.len 2 >= & {
		arr Array64.pop
		arr Array64.pop
		swap &
		arr Array64<<
	} elif dup Inst.b_or = arr rArray64.len 2 >= & {
		arr Array64.pop
		arr Array64.pop
		swap |
		arr Array64<<
	} elif dup Inst.b_xor = arr rArray64.len 2 >= & {
		arr Array64.pop
		arr Array64.pop
		swap ^
		arr Array64<<
	} elif dup Inst.swap = arr rArray64.len 2 >= & {
		arr Array64.pop
		arr Array64.pop
		swap
		arr Array64<<
		arr Array64<<
	} elif dup Inst.over = arr rArray64.len 2 >= & {
		arr rArray64.len 2 - arr Array64[]
		arr Array64<<
	} elif dup Inst.equ = arr rArray64.len 2 >= & {
		arr Array64.pop
		arr Array64.pop
		swap =
		arr Array64<<
	} elif dup Inst.nequ = arr rArray64.len 2 >= & {
		arr Array64.pop
		arr Array64.pop
		swap !=
		arr Array64<<
	} elif dup Inst.gt = arr rArray64.len 2 >= & {
		arr Array64.pop
		arr Array64.pop
		swap >
		arr Array64<<
	} elif dup Inst.lt = arr rArray64.len 2 >= & {
		arr Array64.pop
		arr Array64.pop
		swap <
		arr Array64<<
	} elif dup Inst.gte = arr rArray64.len 2 >= & {
		arr Array64.pop
		arr Array64.pop
		swap >=
		arr Array64<<
	} elif dup Inst.lte = arr rArray64.len 2 >= & {
		arr Array64.pop
		arr Array64.pop
		swap <=
		arr Array64<<
	} elif dup Inst.s_gt = arr rArray64.len 2 >= & {
		arr Array64.pop
		arr Array64.pop
		swap >s
		arr Array64<<
	} elif dup Inst.s_lt = arr rArray64.len 2 >= & {
		arr Array64.pop
		arr Array64.pop
		swap <s
		arr Array64<<
	} elif dup Inst.s_gte = arr rArray64.len 2 >= & {
		arr Array64.pop
		arr Array64.pop
		swap >=s
		arr Array64<<
	} elif dup Inst.s_lte = arr rArray64.len 2 >= & {
		arr Array64.pop
		arr Array64.pop
		swap <=s
		arr Array64<<
	} elif dup Inst.rot = arr rArray64.len 3 >= & {
		arr Array64.pop
		arr Array64.pop
		arr Array64.pop
		rot rot
		arr Array64<<
		arr Array64<<
		arr Array64<<
	} elif dup Inst.over2 = arr rArray64.len 3 >= & {
		arr rArray64.len 3 - arr Array64[]
		arr Array64<<
	} elif dup Inst.rot4 = arr rArray64.len 4 >= & {
		arr Array64.pop
		arr Array64.pop
		arr Array64.pop
		arr Array64.pop
		rot4 rot4 rot4
		arr Array64<<
		arr Array64<<
		arr Array64<<
		arr Array64<<
	} else {
		false pop found
	}
	drop

	found
}